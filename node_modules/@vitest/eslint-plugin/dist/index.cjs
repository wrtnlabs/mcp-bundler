"use strict";const utils=require("@typescript-eslint/utils"),t$1=require("typescript"),node_path=require("node:path"),node_module=require("node:module");var _documentCurrentScript=typeof document<"u"?document.currentScript:null;function _interopDefaultCompat(d){return d&&typeof d=="object"&&"default"in d?d.default:d}const t__default=_interopDefaultCompat(t$1),version="1.1.42";function createEslintRule(d){return utils.ESLintUtils.RuleCreator(Y=>`https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/${Y}.md`)(d)}const joinNames=(d,Y)=>d&&Y?`${d}.${Y}`:null,isFunction=d=>d.type===utils.AST_NODE_TYPES.FunctionExpression||d.type===utils.AST_NODE_TYPES.ArrowFunctionExpression;function getNodeName(d){if(isSupportedAccessor(d))return getAccessorValue(d);switch(d.type){case utils.AST_NODE_TYPES.TaggedTemplateExpression:return getNodeName(d.tag);case utils.AST_NODE_TYPES.MemberExpression:return joinNames(getNodeName(d.object),getNodeName(d.property));case utils.AST_NODE_TYPES.NewExpression:case utils.AST_NODE_TYPES.CallExpression:return getNodeName(d.callee)}return null}const isSupportedAccessor=(d,Y)=>isIdentifier(d,Y)||isStringNode(d,Y),isIdentifier=(d,Y)=>d.type===utils.AST_NODE_TYPES.Identifier&&(Y===void 0||d.name===Y),p$3=(d,Y)=>d.type===utils.AST_NODE_TYPES.TemplateLiteral&&d.quasis.length===1&&(Y===void 0||d.quasis[0].value.raw===Y),g$2=(d,Y)=>d.type===utils.AST_NODE_TYPES.Literal&&typeof d.value=="string"&&(Y===void 0||d.value===Y),isStringNode=(d,Y)=>g$2(d,Y)||p$3(d,Y),getAccessorValue=d=>d.type===utils.AST_NODE_TYPES.Identifier?d.name:getStringValue(d),getStringValue=d=>d?.type===utils.AST_NODE_TYPES.TemplateLiteral?d.quasis[0].value.raw:d?.value,replaceAccessorFixer=(d,Y,q)=>d.replaceText(Y,Y.type===utils.AST_NODE_TYPES.Identifier?q:`'${q}'`),removeExtraArgumentsFixer=(d,Y,q,$)=>{const F=q.arguments[$],B=q.arguments[q.arguments.length-1],{sourceCode:W}=Y;let H=W.getTokenAfter(B);return H.value===","&&(H=W.getTokenAfter(H)),d.removeRange([F.range[0],H.range[0]])},isParsedInstanceOfMatcherCall=(d,Y)=>getAccessorValue(d.matcher)==="toBeInstanceOf"&&d.args.length===1&&isSupportedAccessor(d.args[0],Y);var DescribeAlias=(d=>(d.describe="describe",d.fdescribe="fdescribe",d.xdescribe="xdescribe",d))(DescribeAlias||{}),TestCaseName=(d=>(d.fit="fit",d.it="it",d.test="test",d.xit="xit",d.xtest="xtest",d.bench="bench",d))(TestCaseName||{}),HookName=(d=>(d.beforeAll="beforeAll",d.beforeEach="beforeEach",d.afterAll="afterAll",d.afterEach="afterEach",d))(HookName||{}),ModifierName=(d=>(d.to="to",d.have="have",d.not="not",d.rejects="rejects",d.resolves="resolves",d.returns="returns",d.branded="branded",d.asserts="asserts",d.constructorParameters="constructorParameters",d.parameters="parameters",d.thisParameter="thisParameter",d.guards="guards",d.instance="instance",d.items="items",d))(ModifierName||{}),EqualityMatcher=(d=>(d.toBe="toBe",d.toEqual="toEqual",d.toStrictEqual="toStrictEqual",d))(EqualityMatcher||{});function isClassOrFunctionType(d){return d.getSymbol()?.getDeclarations()?.some(Y=>t__default.isArrowFunction(Y)||t__default.isClassDeclaration(Y)||t__default.isClassExpression(Y)||t__default.isFunctionDeclaration(Y)||t__default.isFunctionExpression(Y)||t__default.isMethodDeclaration(Y))??!1}const ValidVitestFnCallChains=new Set(["beforeEach","beforeAll","afterEach","afterAll","it","it.skip","it.only","it.concurrent","it.sequential","it.todo","it.fails","it.extend","it.skipIf","it.runIf","it.each","it.skip.only","it.skip.concurrent","it.skip.sequential","it.skip.todo","it.skip.fails","it.only.skip","it.only.concurrent","it.only.sequential","it.only.todo","it.only.fails","it.concurrent.skip","it.concurrent.only","it.concurrent.sequential","it.concurrent.todo","it.concurrent.fails","it.sequential.skip","it.sequential.only","it.sequential.concurrent","it.sequential.todo","it.sequential.fails","it.todo.skip","it.todo.only","it.todo.concurrent","it.todo.sequential","it.todo.fails","it.fails.skip","it.fails.only","it.fails.concurrent","it.fails.sequential","it.fails.todo","it.extend.skip","it.extend.only","it.extend.concurrent","it.extend.sequential","it.extend.todo","it.extend.fails","it.skipIf.skip","it.skipIf.only","it.skipIf.concurrent","it.skipIf.sequential","it.skipIf.todo","it.skipIf.fails","it.runIf.skip","it.runIf.only","it.runIf.concurrent","it.runIf.sequential","it.runIf.todo","it.runIf.fails","it.skip.each","it.only.each","it.concurrent.each","it.sequential.each","it.todo.each","it.fails.each","it.extend.skipIf","it.extend.runIf","it.extend.each","it.skipIf.each","it.runIf.each","it.skip.only.concurrent","it.skip.only.sequential","it.skip.only.todo","it.skip.only.fails","it.skip.concurrent.only","it.skip.concurrent.sequential","it.skip.concurrent.todo","it.skip.concurrent.fails","it.skip.sequential.only","it.skip.sequential.concurrent","it.skip.sequential.todo","it.skip.sequential.fails","it.skip.todo.only","it.skip.todo.concurrent","it.skip.todo.sequential","it.skip.todo.fails","it.skip.fails.only","it.skip.fails.concurrent","it.skip.fails.sequential","it.skip.fails.todo","it.only.skip.concurrent","it.only.skip.sequential","it.only.skip.todo","it.only.skip.fails","it.only.concurrent.skip","it.only.concurrent.sequential","it.only.concurrent.todo","it.only.concurrent.fails","it.only.sequential.skip","it.only.sequential.concurrent","it.only.sequential.todo","it.only.sequential.fails","it.only.todo.skip","it.only.todo.concurrent","it.only.todo.sequential","it.only.todo.fails","it.only.fails.skip","it.only.fails.concurrent","it.only.fails.sequential","it.only.fails.todo","it.concurrent.skip.only","it.concurrent.skip.sequential","it.concurrent.skip.todo","it.concurrent.skip.fails","it.concurrent.only.skip","it.concurrent.only.sequential","it.concurrent.only.todo","it.concurrent.only.fails","it.concurrent.sequential.skip","it.concurrent.sequential.only","it.concurrent.sequential.todo","it.concurrent.sequential.fails","it.concurrent.todo.skip","it.concurrent.todo.only","it.concurrent.todo.sequential","it.concurrent.todo.fails","it.concurrent.fails.skip","it.concurrent.fails.only","it.concurrent.fails.sequential","it.concurrent.fails.todo","it.sequential.skip.only","it.sequential.skip.concurrent","it.sequential.skip.todo","it.sequential.skip.fails","it.sequential.only.skip","it.sequential.only.concurrent","it.sequential.only.todo","it.sequential.only.fails","it.sequential.concurrent.skip","it.sequential.concurrent.only","it.sequential.concurrent.todo","it.sequential.concurrent.fails","it.sequential.todo.skip","it.sequential.todo.only","it.sequential.todo.concurrent","it.sequential.todo.fails","it.sequential.fails.skip","it.sequential.fails.only","it.sequential.fails.concurrent","it.sequential.fails.todo","it.todo.skip.only","it.todo.skip.concurrent","it.todo.skip.sequential","it.todo.skip.fails","it.todo.only.skip","it.todo.only.concurrent","it.todo.only.sequential","it.todo.only.fails","it.todo.concurrent.skip","it.todo.concurrent.only","it.todo.concurrent.sequential","it.todo.concurrent.fails","it.todo.sequential.skip","it.todo.sequential.only","it.todo.sequential.concurrent","it.todo.sequential.fails","it.todo.fails.skip","it.todo.fails.only","it.todo.fails.concurrent","it.todo.fails.sequential","it.fails.skip.only","it.fails.skip.concurrent","it.fails.skip.sequential","it.fails.skip.todo","it.fails.only.skip","it.fails.only.concurrent","it.fails.only.sequential","it.fails.only.todo","it.fails.concurrent.skip","it.fails.concurrent.only","it.fails.concurrent.sequential","it.fails.concurrent.todo","it.fails.sequential.skip","it.fails.sequential.only","it.fails.sequential.concurrent","it.fails.sequential.todo","it.fails.todo.skip","it.fails.todo.only","it.fails.todo.concurrent","it.fails.todo.sequential","it.extend.skip.only","it.extend.skip.concurrent","it.extend.skip.sequential","it.extend.skip.todo","it.extend.skip.fails","it.extend.only.skip","it.extend.only.concurrent","it.extend.only.sequential","it.extend.only.todo","it.extend.only.fails","it.extend.concurrent.skip","it.extend.concurrent.only","it.extend.concurrent.sequential","it.extend.concurrent.todo","it.extend.concurrent.fails","it.extend.sequential.skip","it.extend.sequential.only","it.extend.sequential.concurrent","it.extend.sequential.todo","it.extend.sequential.fails","it.extend.todo.skip","it.extend.todo.only","it.extend.todo.concurrent","it.extend.todo.sequential","it.extend.todo.fails","it.extend.fails.skip","it.extend.fails.only","it.extend.fails.concurrent","it.extend.fails.sequential","it.extend.fails.todo","it.skipIf.skip.only","it.skipIf.skip.concurrent","it.skipIf.skip.sequential","it.skipIf.skip.todo","it.skipIf.skip.fails","it.skipIf.only.skip","it.skipIf.only.concurrent","it.skipIf.only.sequential","it.skipIf.only.todo","it.skipIf.only.fails","it.skipIf.concurrent.skip","it.skipIf.concurrent.only","it.skipIf.concurrent.sequential","it.skipIf.concurrent.todo","it.skipIf.concurrent.fails","it.skipIf.sequential.skip","it.skipIf.sequential.only","it.skipIf.sequential.concurrent","it.skipIf.sequential.todo","it.skipIf.sequential.fails","it.skipIf.todo.skip","it.skipIf.todo.only","it.skipIf.todo.concurrent","it.skipIf.todo.sequential","it.skipIf.todo.fails","it.skipIf.fails.skip","it.skipIf.fails.only","it.skipIf.fails.concurrent","it.skipIf.fails.sequential","it.skipIf.fails.todo","it.runIf.skip.only","it.runIf.skip.concurrent","it.runIf.skip.sequential","it.runIf.skip.todo","it.runIf.skip.fails","it.runIf.only.skip","it.runIf.only.concurrent","it.runIf.only.sequential","it.runIf.only.todo","it.runIf.only.fails","it.runIf.concurrent.skip","it.runIf.concurrent.only","it.runIf.concurrent.sequential","it.runIf.concurrent.todo","it.runIf.concurrent.fails","it.runIf.sequential.skip","it.runIf.sequential.only","it.runIf.sequential.concurrent","it.runIf.sequential.todo","it.runIf.sequential.fails","it.runIf.todo.skip","it.runIf.todo.only","it.runIf.todo.concurrent","it.runIf.todo.sequential","it.runIf.todo.fails","it.runIf.fails.skip","it.runIf.fails.only","it.runIf.fails.concurrent","it.runIf.fails.sequential","it.runIf.fails.todo","it.skip.only.each","it.skip.concurrent.each","it.skip.sequential.each","it.skip.todo.each","it.skip.fails.each","it.only.skip.each","it.only.concurrent.each","it.only.sequential.each","it.only.todo.each","it.only.fails.each","it.concurrent.skip.each","it.concurrent.only.each","it.concurrent.sequential.each","it.concurrent.todo.each","it.concurrent.fails.each","it.sequential.skip.each","it.sequential.only.each","it.sequential.concurrent.each","it.sequential.todo.each","it.sequential.fails.each","it.todo.skip.each","it.todo.only.each","it.todo.concurrent.each","it.todo.sequential.each","it.todo.fails.each","it.fails.skip.each","it.fails.only.each","it.fails.concurrent.each","it.fails.sequential.each","it.fails.todo.each","it.extend.skipIf.skip","it.extend.skipIf.only","it.extend.skipIf.concurrent","it.extend.skipIf.sequential","it.extend.skipIf.todo","it.extend.skipIf.fails","it.extend.runIf.skip","it.extend.runIf.only","it.extend.runIf.concurrent","it.extend.runIf.sequential","it.extend.runIf.todo","it.extend.runIf.fails","it.extend.skip.each","it.extend.only.each","it.extend.concurrent.each","it.extend.sequential.each","it.extend.todo.each","it.extend.fails.each","it.skipIf.skip.each","it.skipIf.only.each","it.skipIf.concurrent.each","it.skipIf.sequential.each","it.skipIf.todo.each","it.skipIf.fails.each","it.runIf.skip.each","it.runIf.only.each","it.runIf.concurrent.each","it.runIf.sequential.each","it.runIf.todo.each","it.runIf.fails.each","it.extend.skipIf.each","it.extend.runIf.each","test","test.skip","test.only","test.concurrent","test.sequential","test.todo","test.fails","test.extend","test.skipIf","test.runIf","test.each","test.skip.only","test.skip.concurrent","test.skip.sequential","test.skip.todo","test.skip.fails","test.only.skip","test.only.concurrent","test.only.sequential","test.only.todo","test.only.fails","test.concurrent.skip","test.concurrent.only","test.concurrent.sequential","test.concurrent.todo","test.concurrent.fails","test.sequential.skip","test.sequential.only","test.sequential.concurrent","test.sequential.todo","test.sequential.fails","test.todo.skip","test.todo.only","test.todo.concurrent","test.todo.sequential","test.todo.fails","test.fails.skip","test.fails.only","test.fails.concurrent","test.fails.sequential","test.fails.todo","test.extend.skip","test.extend.only","test.extend.concurrent","test.extend.sequential","test.extend.todo","test.extend.fails","test.skipIf.skip","test.skipIf.only","test.skipIf.concurrent","test.skipIf.sequential","test.skipIf.todo","test.skipIf.fails","test.runIf.skip","test.runIf.only","test.runIf.concurrent","test.runIf.sequential","test.runIf.todo","test.runIf.fails","test.skip.each","test.only.each","test.concurrent.each","test.sequential.each","test.todo.each","test.fails.each","test.extend.skipIf","test.extend.runIf","test.extend.each","test.skipIf.each","test.runIf.each","test.skip.only.concurrent","test.skip.only.sequential","test.skip.only.todo","test.skip.only.fails","test.skip.concurrent.only","test.skip.concurrent.sequential","test.skip.concurrent.todo","test.skip.concurrent.fails","test.skip.sequential.only","test.skip.sequential.concurrent","test.skip.sequential.todo","test.skip.sequential.fails","test.skip.todo.only","test.skip.todo.concurrent","test.skip.todo.sequential","test.skip.todo.fails","test.skip.fails.only","test.skip.fails.concurrent","test.skip.fails.sequential","test.skip.fails.todo","test.only.skip.concurrent","test.only.skip.sequential","test.only.skip.todo","test.only.skip.fails","test.only.concurrent.skip","test.only.concurrent.sequential","test.only.concurrent.todo","test.only.concurrent.fails","test.only.sequential.skip","test.only.sequential.concurrent","test.only.sequential.todo","test.only.sequential.fails","test.only.todo.skip","test.only.todo.concurrent","test.only.todo.sequential","test.only.todo.fails","test.only.fails.skip","test.only.fails.concurrent","test.only.fails.sequential","test.only.fails.todo","test.concurrent.skip.only","test.concurrent.skip.sequential","test.concurrent.skip.todo","test.concurrent.skip.fails","test.concurrent.only.skip","test.concurrent.only.sequential","test.concurrent.only.todo","test.concurrent.only.fails","test.concurrent.sequential.skip","test.concurrent.sequential.only","test.concurrent.sequential.todo","test.concurrent.sequential.fails","test.concurrent.todo.skip","test.concurrent.todo.only","test.concurrent.todo.sequential","test.concurrent.todo.fails","test.concurrent.fails.skip","test.concurrent.fails.only","test.concurrent.fails.sequential","test.concurrent.fails.todo","test.sequential.skip.only","test.sequential.skip.concurrent","test.sequential.skip.todo","test.sequential.skip.fails","test.sequential.only.skip","test.sequential.only.concurrent","test.sequential.only.todo","test.sequential.only.fails","test.sequential.concurrent.skip","test.sequential.concurrent.only","test.sequential.concurrent.todo","test.sequential.concurrent.fails","test.sequential.todo.skip","test.sequential.todo.only","test.sequential.todo.concurrent","test.sequential.todo.fails","test.sequential.fails.skip","test.sequential.fails.only","test.sequential.fails.concurrent","test.sequential.fails.todo","test.todo.skip.only","test.todo.skip.concurrent","test.todo.skip.sequential","test.todo.skip.fails","test.todo.only.skip","test.todo.only.concurrent","test.todo.only.sequential","test.todo.only.fails","test.todo.concurrent.skip","test.todo.concurrent.only","test.todo.concurrent.sequential","test.todo.concurrent.fails","test.todo.sequential.skip","test.todo.sequential.only","test.todo.sequential.concurrent","test.todo.sequential.fails","test.todo.fails.skip","test.todo.fails.only","test.todo.fails.concurrent","test.todo.fails.sequential","test.fails.skip.only","test.fails.skip.concurrent","test.fails.skip.sequential","test.fails.skip.todo","test.fails.only.skip","test.fails.only.concurrent","test.fails.only.sequential","test.fails.only.todo","test.fails.concurrent.skip","test.fails.concurrent.only","test.fails.concurrent.sequential","test.fails.concurrent.todo","test.fails.sequential.skip","test.fails.sequential.only","test.fails.sequential.concurrent","test.fails.sequential.todo","test.fails.todo.skip","test.fails.todo.only","test.fails.todo.concurrent","test.fails.todo.sequential","test.extend.skip.only","test.extend.skip.concurrent","test.extend.skip.sequential","test.extend.skip.todo","test.extend.skip.fails","test.extend.only.skip","test.extend.only.concurrent","test.extend.only.sequential","test.extend.only.todo","test.extend.only.fails","test.extend.concurrent.skip","test.extend.concurrent.only","test.extend.concurrent.sequential","test.extend.concurrent.todo","test.extend.concurrent.fails","test.extend.sequential.skip","test.extend.sequential.only","test.extend.sequential.concurrent","test.extend.sequential.todo","test.extend.sequential.fails","test.extend.todo.skip","test.extend.todo.only","test.extend.todo.concurrent","test.extend.todo.sequential","test.extend.todo.fails","test.extend.fails.skip","test.extend.fails.only","test.extend.fails.concurrent","test.extend.fails.sequential","test.extend.fails.todo","test.skipIf.skip.only","test.skipIf.skip.concurrent","test.skipIf.skip.sequential","test.skipIf.skip.todo","test.skipIf.skip.fails","test.skipIf.only.skip","test.skipIf.only.concurrent","test.skipIf.only.sequential","test.skipIf.only.todo","test.skipIf.only.fails","test.skipIf.concurrent.skip","test.skipIf.concurrent.only","test.skipIf.concurrent.sequential","test.skipIf.concurrent.todo","test.skipIf.concurrent.fails","test.skipIf.sequential.skip","test.skipIf.sequential.only","test.skipIf.sequential.concurrent","test.skipIf.sequential.todo","test.skipIf.sequential.fails","test.skipIf.todo.skip","test.skipIf.todo.only","test.skipIf.todo.concurrent","test.skipIf.todo.sequential","test.skipIf.todo.fails","test.skipIf.fails.skip","test.skipIf.fails.only","test.skipIf.fails.concurrent","test.skipIf.fails.sequential","test.skipIf.fails.todo","test.runIf.skip.only","test.runIf.skip.concurrent","test.runIf.skip.sequential","test.runIf.skip.todo","test.runIf.skip.fails","test.runIf.only.skip","test.runIf.only.concurrent","test.runIf.only.sequential","test.runIf.only.todo","test.runIf.only.fails","test.runIf.concurrent.skip","test.runIf.concurrent.only","test.runIf.concurrent.sequential","test.runIf.concurrent.todo","test.runIf.concurrent.fails","test.runIf.sequential.skip","test.runIf.sequential.only","test.runIf.sequential.concurrent","test.runIf.sequential.todo","test.runIf.sequential.fails","test.runIf.todo.skip","test.runIf.todo.only","test.runIf.todo.concurrent","test.runIf.todo.sequential","test.runIf.todo.fails","test.runIf.fails.skip","test.runIf.fails.only","test.runIf.fails.concurrent","test.runIf.fails.sequential","test.runIf.fails.todo","test.skip.only.each","test.skip.concurrent.each","test.skip.sequential.each","test.skip.todo.each","test.skip.fails.each","test.only.skip.each","test.only.concurrent.each","test.only.sequential.each","test.only.todo.each","test.only.fails.each","test.concurrent.skip.each","test.concurrent.only.each","test.concurrent.sequential.each","test.concurrent.todo.each","test.concurrent.fails.each","test.sequential.skip.each","test.sequential.only.each","test.sequential.concurrent.each","test.sequential.todo.each","test.sequential.fails.each","test.todo.skip.each","test.todo.only.each","test.todo.concurrent.each","test.todo.sequential.each","test.todo.fails.each","test.fails.skip.each","test.fails.only.each","test.fails.concurrent.each","test.fails.sequential.each","test.fails.todo.each","test.extend.skipIf.skip","test.extend.skipIf.only","test.extend.skipIf.concurrent","test.extend.skipIf.sequential","test.extend.skipIf.todo","test.extend.skipIf.fails","test.extend.runIf.skip","test.extend.runIf.only","test.extend.runIf.concurrent","test.extend.runIf.sequential","test.extend.runIf.todo","test.extend.runIf.fails","test.extend.skip.each","test.extend.only.each","test.extend.concurrent.each","test.extend.sequential.each","test.extend.todo.each","test.extend.fails.each","test.skipIf.skip.each","test.skipIf.only.each","test.skipIf.concurrent.each","test.skipIf.sequential.each","test.skipIf.todo.each","test.skipIf.fails.each","test.runIf.skip.each","test.runIf.only.each","test.runIf.concurrent.each","test.runIf.sequential.each","test.runIf.todo.each","test.runIf.fails.each","test.extend.skipIf.each","test.extend.runIf.each","bench","bench.skip","bench.only","bench.todo","bench.skipIf","bench.runIf","bench.skip.only","bench.skip.todo","bench.only.skip","bench.only.todo","bench.todo.skip","bench.todo.only","bench.skipIf.skip","bench.skipIf.only","bench.skipIf.todo","bench.runIf.skip","bench.runIf.only","bench.runIf.todo","bench.skip.only.todo","bench.skip.todo.only","bench.only.skip.todo","bench.only.todo.skip","bench.todo.skip.only","bench.todo.only.skip","bench.skipIf.skip.only","bench.skipIf.skip.todo","bench.skipIf.only.skip","bench.skipIf.only.todo","bench.skipIf.todo.skip","bench.skipIf.todo.only","bench.runIf.skip.only","bench.runIf.skip.todo","bench.runIf.only.skip","bench.runIf.only.todo","bench.runIf.todo.skip","bench.runIf.todo.only","describe","describe.skip","describe.only","describe.concurrent","describe.sequential","describe.shuffle","describe.todo","describe.skipIf","describe.runIf","describe.each","describe.skip.only","describe.skip.concurrent","describe.skip.sequential","describe.skip.shuffle","describe.skip.todo","describe.only.skip","describe.only.concurrent","describe.only.sequential","describe.only.shuffle","describe.only.todo","describe.concurrent.skip","describe.concurrent.only","describe.concurrent.sequential","describe.concurrent.shuffle","describe.concurrent.todo","describe.sequential.skip","describe.sequential.only","describe.sequential.concurrent","describe.sequential.shuffle","describe.sequential.todo","describe.shuffle.skip","describe.shuffle.only","describe.shuffle.concurrent","describe.shuffle.sequential","describe.shuffle.todo","describe.todo.skip","describe.todo.only","describe.todo.concurrent","describe.todo.sequential","describe.todo.shuffle","describe.skipIf.skip","describe.skipIf.only","describe.skipIf.concurrent","describe.skipIf.sequential","describe.skipIf.shuffle","describe.skipIf.todo","describe.runIf.skip","describe.runIf.only","describe.runIf.concurrent","describe.runIf.sequential","describe.runIf.shuffle","describe.runIf.todo","describe.skip.each","describe.only.each","describe.concurrent.each","describe.sequential.each","describe.shuffle.each","describe.todo.each","describe.skipIf.each","describe.runIf.each","describe.skip.only.concurrent","describe.skip.only.sequential","describe.skip.only.shuffle","describe.skip.only.todo","describe.skip.concurrent.only","describe.skip.concurrent.sequential","describe.skip.concurrent.shuffle","describe.skip.concurrent.todo","describe.skip.sequential.only","describe.skip.sequential.concurrent","describe.skip.sequential.shuffle","describe.skip.sequential.todo","describe.skip.shuffle.only","describe.skip.shuffle.concurrent","describe.skip.shuffle.sequential","describe.skip.shuffle.todo","describe.skip.todo.only","describe.skip.todo.concurrent","describe.skip.todo.sequential","describe.skip.todo.shuffle","describe.only.skip.concurrent","describe.only.skip.sequential","describe.only.skip.shuffle","describe.only.skip.todo","describe.only.concurrent.skip","describe.only.concurrent.sequential","describe.only.concurrent.shuffle","describe.only.concurrent.todo","describe.only.sequential.skip","describe.only.sequential.concurrent","describe.only.sequential.shuffle","describe.only.sequential.todo","describe.only.shuffle.skip","describe.only.shuffle.concurrent","describe.only.shuffle.sequential","describe.only.shuffle.todo","describe.only.todo.skip","describe.only.todo.concurrent","describe.only.todo.sequential","describe.only.todo.shuffle","describe.concurrent.skip.only","describe.concurrent.skip.sequential","describe.concurrent.skip.shuffle","describe.concurrent.skip.todo","describe.concurrent.only.skip","describe.concurrent.only.sequential","describe.concurrent.only.shuffle","describe.concurrent.only.todo","describe.concurrent.sequential.skip","describe.concurrent.sequential.only","describe.concurrent.sequential.shuffle","describe.concurrent.sequential.todo","describe.concurrent.shuffle.skip","describe.concurrent.shuffle.only","describe.concurrent.shuffle.sequential","describe.concurrent.shuffle.todo","describe.concurrent.todo.skip","describe.concurrent.todo.only","describe.concurrent.todo.sequential","describe.concurrent.todo.shuffle","describe.sequential.skip.only","describe.sequential.skip.concurrent","describe.sequential.skip.shuffle","describe.sequential.skip.todo","describe.sequential.only.skip","describe.sequential.only.concurrent","describe.sequential.only.shuffle","describe.sequential.only.todo","describe.sequential.concurrent.skip","describe.sequential.concurrent.only","describe.sequential.concurrent.shuffle","describe.sequential.concurrent.todo","describe.sequential.shuffle.skip","describe.sequential.shuffle.only","describe.sequential.shuffle.concurrent","describe.sequential.shuffle.todo","describe.sequential.todo.skip","describe.sequential.todo.only","describe.sequential.todo.concurrent","describe.sequential.todo.shuffle","describe.shuffle.skip.only","describe.shuffle.skip.concurrent","describe.shuffle.skip.sequential","describe.shuffle.skip.todo","describe.shuffle.only.skip","describe.shuffle.only.concurrent","describe.shuffle.only.sequential","describe.shuffle.only.todo","describe.shuffle.concurrent.skip","describe.shuffle.concurrent.only","describe.shuffle.concurrent.sequential","describe.shuffle.concurrent.todo","describe.shuffle.sequential.skip","describe.shuffle.sequential.only","describe.shuffle.sequential.concurrent","describe.shuffle.sequential.todo","describe.shuffle.todo.skip","describe.shuffle.todo.only","describe.shuffle.todo.concurrent","describe.shuffle.todo.sequential","describe.todo.skip.only","describe.todo.skip.concurrent","describe.todo.skip.sequential","describe.todo.skip.shuffle","describe.todo.only.skip","describe.todo.only.concurrent","describe.todo.only.sequential","describe.todo.only.shuffle","describe.todo.concurrent.skip","describe.todo.concurrent.only","describe.todo.concurrent.sequential","describe.todo.concurrent.shuffle","describe.todo.sequential.skip","describe.todo.sequential.only","describe.todo.sequential.concurrent","describe.todo.sequential.shuffle","describe.todo.shuffle.skip","describe.todo.shuffle.only","describe.todo.shuffle.concurrent","describe.todo.shuffle.sequential","describe.skipIf.skip.only","describe.skipIf.skip.concurrent","describe.skipIf.skip.sequential","describe.skipIf.skip.shuffle","describe.skipIf.skip.todo","describe.skipIf.only.skip","describe.skipIf.only.concurrent","describe.skipIf.only.sequential","describe.skipIf.only.shuffle","describe.skipIf.only.todo","describe.skipIf.concurrent.skip","describe.skipIf.concurrent.only","describe.skipIf.concurrent.sequential","describe.skipIf.concurrent.shuffle","describe.skipIf.concurrent.todo","describe.skipIf.sequential.skip","describe.skipIf.sequential.only","describe.skipIf.sequential.concurrent","describe.skipIf.sequential.shuffle","describe.skipIf.sequential.todo","describe.skipIf.shuffle.skip","describe.skipIf.shuffle.only","describe.skipIf.shuffle.concurrent","describe.skipIf.shuffle.sequential","describe.skipIf.shuffle.todo","describe.skipIf.todo.skip","describe.skipIf.todo.only","describe.skipIf.todo.concurrent","describe.skipIf.todo.sequential","describe.skipIf.todo.shuffle","describe.runIf.skip.only","describe.runIf.skip.concurrent","describe.runIf.skip.sequential","describe.runIf.skip.shuffle","describe.runIf.skip.todo","describe.runIf.only.skip","describe.runIf.only.concurrent","describe.runIf.only.sequential","describe.runIf.only.shuffle","describe.runIf.only.todo","describe.runIf.concurrent.skip","describe.runIf.concurrent.only","describe.runIf.concurrent.sequential","describe.runIf.concurrent.shuffle","describe.runIf.concurrent.todo","describe.runIf.sequential.skip","describe.runIf.sequential.only","describe.runIf.sequential.concurrent","describe.runIf.sequential.shuffle","describe.runIf.sequential.todo","describe.runIf.shuffle.skip","describe.runIf.shuffle.only","describe.runIf.shuffle.concurrent","describe.runIf.shuffle.sequential","describe.runIf.shuffle.todo","describe.runIf.todo.skip","describe.runIf.todo.only","describe.runIf.todo.concurrent","describe.runIf.todo.sequential","describe.runIf.todo.shuffle","describe.skip.only.each","describe.skip.concurrent.each","describe.skip.sequential.each","describe.skip.shuffle.each","describe.skip.todo.each","describe.only.skip.each","describe.only.concurrent.each","describe.only.sequential.each","describe.only.shuffle.each","describe.only.todo.each","describe.concurrent.skip.each","describe.concurrent.only.each","describe.concurrent.sequential.each","describe.concurrent.shuffle.each","describe.concurrent.todo.each","describe.sequential.skip.each","describe.sequential.only.each","describe.sequential.concurrent.each","describe.sequential.shuffle.each","describe.sequential.todo.each","describe.shuffle.skip.each","describe.shuffle.only.each","describe.shuffle.concurrent.each","describe.shuffle.sequential.each","describe.shuffle.todo.each","describe.todo.skip.each","describe.todo.only.each","describe.todo.concurrent.each","describe.todo.sequential.each","describe.todo.shuffle.each","describe.skipIf.skip.each","describe.skipIf.only.each","describe.skipIf.concurrent.each","describe.skipIf.sequential.each","describe.skipIf.shuffle.each","describe.skipIf.todo.each","describe.runIf.skip.each","describe.runIf.only.each","describe.runIf.concurrent.each","describe.runIf.sequential.each","describe.runIf.shuffle.each","describe.runIf.todo.each","suite","suite.skip","suite.only","suite.concurrent","suite.sequential","suite.shuffle","suite.todo","suite.skipIf","suite.runIf","suite.each","suite.skip.only","suite.skip.concurrent","suite.skip.sequential","suite.skip.shuffle","suite.skip.todo","suite.only.skip","suite.only.concurrent","suite.only.sequential","suite.only.shuffle","suite.only.todo","suite.concurrent.skip","suite.concurrent.only","suite.concurrent.sequential","suite.concurrent.shuffle","suite.concurrent.todo","suite.sequential.skip","suite.sequential.only","suite.sequential.concurrent","suite.sequential.shuffle","suite.sequential.todo","suite.shuffle.skip","suite.shuffle.only","suite.shuffle.concurrent","suite.shuffle.sequential","suite.shuffle.todo","suite.todo.skip","suite.todo.only","suite.todo.concurrent","suite.todo.sequential","suite.todo.shuffle","suite.skipIf.skip","suite.skipIf.only","suite.skipIf.concurrent","suite.skipIf.sequential","suite.skipIf.shuffle","suite.skipIf.todo","suite.runIf.skip","suite.runIf.only","suite.runIf.concurrent","suite.runIf.sequential","suite.runIf.shuffle","suite.runIf.todo","suite.skip.each","suite.only.each","suite.concurrent.each","suite.sequential.each","suite.shuffle.each","suite.todo.each","suite.skipIf.each","suite.runIf.each","suite.skip.only.concurrent","suite.skip.only.sequential","suite.skip.only.shuffle","suite.skip.only.todo","suite.skip.concurrent.only","suite.skip.concurrent.sequential","suite.skip.concurrent.shuffle","suite.skip.concurrent.todo","suite.skip.sequential.only","suite.skip.sequential.concurrent","suite.skip.sequential.shuffle","suite.skip.sequential.todo","suite.skip.shuffle.only","suite.skip.shuffle.concurrent","suite.skip.shuffle.sequential","suite.skip.shuffle.todo","suite.skip.todo.only","suite.skip.todo.concurrent","suite.skip.todo.sequential","suite.skip.todo.shuffle","suite.only.skip.concurrent","suite.only.skip.sequential","suite.only.skip.shuffle","suite.only.skip.todo","suite.only.concurrent.skip","suite.only.concurrent.sequential","suite.only.concurrent.shuffle","suite.only.concurrent.todo","suite.only.sequential.skip","suite.only.sequential.concurrent","suite.only.sequential.shuffle","suite.only.sequential.todo","suite.only.shuffle.skip","suite.only.shuffle.concurrent","suite.only.shuffle.sequential","suite.only.shuffle.todo","suite.only.todo.skip","suite.only.todo.concurrent","suite.only.todo.sequential","suite.only.todo.shuffle","suite.concurrent.skip.only","suite.concurrent.skip.sequential","suite.concurrent.skip.shuffle","suite.concurrent.skip.todo","suite.concurrent.only.skip","suite.concurrent.only.sequential","suite.concurrent.only.shuffle","suite.concurrent.only.todo","suite.concurrent.sequential.skip","suite.concurrent.sequential.only","suite.concurrent.sequential.shuffle","suite.concurrent.sequential.todo","suite.concurrent.shuffle.skip","suite.concurrent.shuffle.only","suite.concurrent.shuffle.sequential","suite.concurrent.shuffle.todo","suite.concurrent.todo.skip","suite.concurrent.todo.only","suite.concurrent.todo.sequential","suite.concurrent.todo.shuffle","suite.sequential.skip.only","suite.sequential.skip.concurrent","suite.sequential.skip.shuffle","suite.sequential.skip.todo","suite.sequential.only.skip","suite.sequential.only.concurrent","suite.sequential.only.shuffle","suite.sequential.only.todo","suite.sequential.concurrent.skip","suite.sequential.concurrent.only","suite.sequential.concurrent.shuffle","suite.sequential.concurrent.todo","suite.sequential.shuffle.skip","suite.sequential.shuffle.only","suite.sequential.shuffle.concurrent","suite.sequential.shuffle.todo","suite.sequential.todo.skip","suite.sequential.todo.only","suite.sequential.todo.concurrent","suite.sequential.todo.shuffle","suite.shuffle.skip.only","suite.shuffle.skip.concurrent","suite.shuffle.skip.sequential","suite.shuffle.skip.todo","suite.shuffle.only.skip","suite.shuffle.only.concurrent","suite.shuffle.only.sequential","suite.shuffle.only.todo","suite.shuffle.concurrent.skip","suite.shuffle.concurrent.only","suite.shuffle.concurrent.sequential","suite.shuffle.concurrent.todo","suite.shuffle.sequential.skip","suite.shuffle.sequential.only","suite.shuffle.sequential.concurrent","suite.shuffle.sequential.todo","suite.shuffle.todo.skip","suite.shuffle.todo.only","suite.shuffle.todo.concurrent","suite.shuffle.todo.sequential","suite.todo.skip.only","suite.todo.skip.concurrent","suite.todo.skip.sequential","suite.todo.skip.shuffle","suite.todo.only.skip","suite.todo.only.concurrent","suite.todo.only.sequential","suite.todo.only.shuffle","suite.todo.concurrent.skip","suite.todo.concurrent.only","suite.todo.concurrent.sequential","suite.todo.concurrent.shuffle","suite.todo.sequential.skip","suite.todo.sequential.only","suite.todo.sequential.concurrent","suite.todo.sequential.shuffle","suite.todo.shuffle.skip","suite.todo.shuffle.only","suite.todo.shuffle.concurrent","suite.todo.shuffle.sequential","suite.skipIf.skip.only","suite.skipIf.skip.concurrent","suite.skipIf.skip.sequential","suite.skipIf.skip.shuffle","suite.skipIf.skip.todo","suite.skipIf.only.skip","suite.skipIf.only.concurrent","suite.skipIf.only.sequential","suite.skipIf.only.shuffle","suite.skipIf.only.todo","suite.skipIf.concurrent.skip","suite.skipIf.concurrent.only","suite.skipIf.concurrent.sequential","suite.skipIf.concurrent.shuffle","suite.skipIf.concurrent.todo","suite.skipIf.sequential.skip","suite.skipIf.sequential.only","suite.skipIf.sequential.concurrent","suite.skipIf.sequential.shuffle","suite.skipIf.sequential.todo","suite.skipIf.shuffle.skip","suite.skipIf.shuffle.only","suite.skipIf.shuffle.concurrent","suite.skipIf.shuffle.sequential","suite.skipIf.shuffle.todo","suite.skipIf.todo.skip","suite.skipIf.todo.only","suite.skipIf.todo.concurrent","suite.skipIf.todo.sequential","suite.skipIf.todo.shuffle","suite.runIf.skip.only","suite.runIf.skip.concurrent","suite.runIf.skip.sequential","suite.runIf.skip.shuffle","suite.runIf.skip.todo","suite.runIf.only.skip","suite.runIf.only.concurrent","suite.runIf.only.sequential","suite.runIf.only.shuffle","suite.runIf.only.todo","suite.runIf.concurrent.skip","suite.runIf.concurrent.only","suite.runIf.concurrent.sequential","suite.runIf.concurrent.shuffle","suite.runIf.concurrent.todo","suite.runIf.sequential.skip","suite.runIf.sequential.only","suite.runIf.sequential.concurrent","suite.runIf.sequential.shuffle","suite.runIf.sequential.todo","suite.runIf.shuffle.skip","suite.runIf.shuffle.only","suite.runIf.shuffle.concurrent","suite.runIf.shuffle.sequential","suite.runIf.shuffle.todo","suite.runIf.todo.skip","suite.runIf.todo.only","suite.runIf.todo.concurrent","suite.runIf.todo.sequential","suite.runIf.todo.shuffle","suite.skip.only.each","suite.skip.concurrent.each","suite.skip.sequential.each","suite.skip.shuffle.each","suite.skip.todo.each","suite.only.skip.each","suite.only.concurrent.each","suite.only.sequential.each","suite.only.shuffle.each","suite.only.todo.each","suite.concurrent.skip.each","suite.concurrent.only.each","suite.concurrent.sequential.each","suite.concurrent.shuffle.each","suite.concurrent.todo.each","suite.sequential.skip.each","suite.sequential.only.each","suite.sequential.concurrent.each","suite.sequential.shuffle.each","suite.sequential.todo.each","suite.shuffle.skip.each","suite.shuffle.only.each","suite.shuffle.concurrent.each","suite.shuffle.sequential.each","suite.shuffle.todo.each","suite.todo.skip.each","suite.todo.only.each","suite.todo.concurrent.each","suite.todo.sequential.each","suite.todo.shuffle.each","suite.skipIf.skip.each","suite.skipIf.only.each","suite.skipIf.concurrent.each","suite.skipIf.sequential.each","suite.skipIf.shuffle.each","suite.skipIf.todo.each","suite.runIf.skip.each","suite.runIf.only.each","suite.runIf.concurrent.each","suite.runIf.sequential.each","suite.runIf.shuffle.each","suite.runIf.todo.each","xtest","xtest.each","xit","xit.each","fit","xdescribe","xdescribe.each","fdescribe"]);function getScope(d,Y){return d.sourceCode.getScope?d.sourceCode.getScope(Y):d.getScope()}function getModuleScope(d,Y){let q=getScope(d,Y);for(;q;){if(q.type==="module")return q;q=q.upper}return q}const isTypeOfVitestFnCall=(d,Y,q)=>{const $=parseVitestFnCall(d,Y);return $!==null&&q.includes($.type)},parseVitestFnCall=(d,Y)=>{const q=parseVitestFnCallWithReason(d,Y);return typeof q=="string"?null:q},y$4=new WeakMap,parseVitestFnCallWithReason=(d,Y)=>{let q=y$4.get(d);return q||(q=M$3(d,Y),y$4.set(d,q),q)},A$3=d=>d==="expect"?"expect":d==="expectTypeOf"?"expectTypeOf":d==="vi"?"vi":DescribeAlias.hasOwnProperty(d)?"describe":TestCaseName.hasOwnProperty(d)?"test":HookName.hasOwnProperty(d)?"hook":"unknown",w$2=d=>{const Y=[];for(const q of d){if(q.parent?.type===utils.AST_NODE_TYPES.MemberExpression&&q.parent.parent?.type===utils.AST_NODE_TYPES.CallExpression)return{matcher:q,args:q.parent.parent.arguments,modifiers:Y};const $=getAccessorValue(q);if(Y.length===0){if(!ModifierName.hasOwnProperty($))return"modifier-unknown"}else if(Y.length===1){if($!==ModifierName.not&&$!=ModifierName.have)return"modifier-unknown";const F=getAccessorValue(Y[0]);if(F!==ModifierName.resolves&&F!==ModifierName.rejects&&F!==ModifierName.to)return"modifier-unknown"}else return"modifier-unknown";Y.push(q)}return"matcher-not-found"},P$2=(d,Y)=>{const q=w$2(d.members);return typeof q=="string"?q:{...d,type:Y,...q}},findTopMostCallExpression=d=>{let Y=d,{parent:q}=d;for(;q;){if(q.type===utils.AST_NODE_TYPES.CallExpression){Y=q,q=q.parent;continue}if(q.type!==utils.AST_NODE_TYPES.MemberExpression)break;q=q.parent}return Y},M$3=(d,Y)=>{const q=getNodeChain(d);if(!q?.length)return null;const[$,...F]=q,B=getAccessorValue(q[q.length-1]);if(B==="each"&&d.callee.type!==utils.AST_NODE_TYPES.CallExpression&&d.callee.type!==utils.AST_NODE_TYPES.TaggedTemplateExpression||d.callee.type===utils.AST_NODE_TYPES.TaggedTemplateExpression&&B!=="each")return null;const W=N$4(Y,d,getAccessorValue($));if(!W)return null;const H=W.original??W.local,V=[H,...F.map(getAccessorValue)];if(W.type!=="testContext"&&H!=="vi"&&H!=="expect"&&H!=="expectTypeOf"&&!ValidVitestFnCallChains.has(V.join(".")))return null;const G={name:H,head:{...W,node:$},members:F},J=A$3(H);if(J==="expect"||J==="expectTypeOf"){const X=P$2(G,J);return typeof X=="string"&&findTopMostCallExpression(d)!==d?null:X==="matcher-not-found"&&d.parent?.type===utils.AST_NODE_TYPES.MemberExpression?"matcher-not-called":X}return q.slice(0,q.length-1).some(X=>X.parent?.type!==utils.AST_NODE_TYPES.MemberExpression)||d.parent?.type===utils.AST_NODE_TYPES.CallExpression||d.parent?.type===utils.AST_NODE_TYPES.MemberExpression?null:{...G,type:J}},k$1=(d,Y)=>d&&Y?[...d,...Y]:null;function getNodeChain(d){if(isSupportedAccessor(d))return[d];switch(d.type){case utils.AST_NODE_TYPES.TaggedTemplateExpression:return getNodeChain(d.tag);case utils.AST_NODE_TYPES.MemberExpression:return k$1(getNodeChain(d.object),getNodeChain(d.property));case utils.AST_NODE_TYPES.CallExpression:return getNodeChain(d.callee)}return null}const N$4=(d,Y,q)=>{const $=getScope(d,Y),F=resolveScope($,q);return F==="local"?null:F==="testContext"?{local:q,original:null,type:"testContext"}:F?F.source==="vitest"?{original:F.imported,local:F.local,type:"import"}:null:{original:I$1(q,d),local:q,type:"global"}},I$1=(d,Y)=>{const q=Y.settings.vitest?.globalAliases??{},$=Object.entries(q).find(([F,B])=>B.includes(d));return $?$[0]:null},v=({parent:d})=>{if(d?.type===utils.AST_NODE_TYPES.CallExpression&&d.callee.type===utils.AST_NODE_TYPES.Identifier)return TestCaseName.hasOwnProperty(d.callee.name)},resolveScope=(d,Y)=>{let q=d;for(;q!==null;){const $=q.set.get(Y);if($&&$.defs.length>0){const F=$.defs[$.defs.length-1],B=isFunction(F.node)?F.node.params.find(V=>V.type===utils.AST_NODE_TYPES.ObjectPattern):void 0;if(B){const V=B.properties.find(G=>G.type===utils.AST_NODE_TYPES.Property);if((V?.key.type===utils.AST_NODE_TYPES.Identifier?V.key:void 0)?.name===Y)return"testContext"}const W=isFunction(F.node)?F.node.params.find(V=>V.type===utils.AST_NODE_TYPES.Identifier):void 0;if(W&&v(W.parent))return"testContext";const H=D$1(F);return H?.local===Y?H:"local"}q=q.upper}return null},R=d=>d.type===utils.AST_NODE_TYPES.AwaitExpression?d.argument.type===utils.AST_NODE_TYPES.ImportExpression?d.argument.source:null:d.type===utils.AST_NODE_TYPES.CallExpression&&isIdentifier(d.callee,"require")?d.arguments[0]??null:null,O$2=d=>d.parent.type===utils.AST_NODE_TYPES.TSImportEqualsDeclaration||d.node.type!==utils.AST_NODE_TYPES.ImportSpecifier||d.node.imported.type!=utils.AST_NODE_TYPES.Identifier||d.parent.importKind==="type"?null:{source:d.parent.source.value,imported:d.node.imported.name,local:d.node.local.name},D$1=d=>d.type==="Variable"?L$1(d):d.type==="ImportBinding"?O$2(d):null,L$1=d=>{if(!d.node.init)return null;const Y=R(d.node.init);return!Y||!isStringNode(Y)||d.name.parent?.type!==utils.AST_NODE_TYPES.Property||!isSupportedAccessor(d.name.parent.key)?null:{source:getStringValue(Y),imported:getAccessorValue(d.name.parent.key),local:d.name.name}},getTestCallExpressionsFromDeclaredVariables=(d,Y)=>d.reduce((q,{references:$})=>q.concat($.map(({identifier:F})=>F.parent).filter(F=>F?.type===utils.AST_NODE_TYPES.CallExpression&&isTypeOfVitestFnCall(F,Y,["test"]))),[]),getFirstMatcherArg=d=>{const[Y]=d.args;return Y.type===utils.AST_NODE_TYPES.SpreadElement?Y:followTypeAssertionChain$1(Y)},K=d=>d.type===utils.AST_NODE_TYPES.TSAsExpression||d.type===utils.AST_NODE_TYPES.TSTypeAssertion,followTypeAssertionChain$1=d=>K(d)?followTypeAssertionChain$1(d.expression):d,RULE_NAME$10="prefer-lowercase-title",E$5=d=>d.arguments[0]&&isStringNode(d.arguments[0]),x$4=d=>{const Y=[];return d.includes(DescribeAlias.describe)&&Y.push(...Object.keys(DescribeAlias)),d.includes(TestCaseName.test)&&Y.push(...Object.keys(TestCaseName).filter(q=>q.endsWith(TestCaseName.test))),d.includes(TestCaseName.it)&&Y.push(...Object.keys(TestCaseName).filter(q=>q.endsWith(TestCaseName.it))),Y},Re=createEslintRule({name:RULE_NAME$10,meta:{type:"problem",docs:{description:"enforce lowercase titles",recommended:!1},fixable:"code",messages:{lowerCaseTitle:"`{{ method }}`s should begin with lowercase",fullyLowerCaseTitle:"`{{ method }}`s should be lowercase"},schema:[{type:"object",properties:{ignore:{type:"array",items:{type:"string",enum:[DescribeAlias.describe,TestCaseName.test,TestCaseName.it]}},allowedPrefixes:{type:"array",items:{type:"string"},additionalItems:!1},ignoreTopLevelDescribe:{type:"boolean",default:!1},lowercaseFirstCharacterOnly:{type:"boolean",default:!0}},additionalProperties:!1}]},defaultOptions:[{ignore:[],allowedPrefixes:[],ignoreTopLevelDescribe:!1,lowercaseFirstCharacterOnly:!0}],create:(d,[{ignore:Y=[],allowedPrefixes:q=[],ignoreTopLevelDescribe:$=!1,lowercaseFirstCharacterOnly:F=!1}])=>{const B=x$4(Y);let W=0;return{CallExpression(H){const V=parseVitestFnCall(H,d);if(!V||!E$5)return;if(V?.type==="describe"){if(W++,$&&W===1)return}else if(V?.type!=="test")return;const[G]=H.arguments,J=getStringValue(G);if(typeof J!="string"||q.some(ee=>J.startsWith(ee)))return;const X=J.charAt(0);B.includes(V.name)||F&&(!X||X===X.toLowerCase())||!F&&J===J.toLowerCase()||d.report({messageId:F?"lowerCaseTitle":"fullyLowerCaseTitle",node:H.arguments[0],data:{method:V.name},fix:ee=>{const z=getStringValue(G),te=[G.range[0]+1,G.range[1]-1],Q=F?z.substring(0,1).toLowerCase()+z.substring(1):z.toLowerCase();return[ee.replaceTextRange(te,Q)]}})},"CallExpression:exit"(H){isTypeOfVitestFnCall(H,d,["describe"])&&W--}}}}),RULE_NAME$$="max-nested-describe",Le=createEslintRule({name:RULE_NAME$$,meta:{type:"problem",docs:{description:"require describe block to be less than set max value or default value",recommended:!1},schema:[{type:"object",properties:{max:{type:"number"}},additionalProperties:!1}],messages:{maxNestedDescribe:"Nested describe block should be less than set max value"}},defaultOptions:[{max:5}],create(d,[{max:Y}]){const q=[];function $(B){B.parent?.type==="CallExpression"&&(B.parent.callee.type!=="Identifier"||B.parent.callee.name!=="describe"||(q.push(0),q.length>Y&&d.report({node:B.parent,messageId:"maxNestedDescribe"})))}function F(B){B.parent?.type==="CallExpression"&&(B.parent.callee.type!=="Identifier"||B.parent.callee.name!=="describe"||q.pop())}return{FunctionExpression:$,"FunctionExpression:exit":F,ArrowFunctionExpression:$,"ArrowFunctionExpression:exit":F}}}),RULE_NAME$_="no-identical-title",c$4=()=>({describeTitles:[],testTitles:[]}),Te=createEslintRule({name:RULE_NAME$_,meta:{type:"problem",docs:{description:"disallow identical titles",recommended:!1},fixable:"code",schema:[],messages:{multipleTestTitle:"Test is used multiple times in the same describe(suite) block",multipleDescribeTitle:"Describe is used multiple times in the same describe(suite) block"}},defaultOptions:[],create(d){const Y=[c$4()];return{CallExpression(q){const $=Y[Y.length-1],F=parseVitestFnCall(q,d);if(!F||((F.name==="describe"||F.name==="suite")&&Y.push(c$4()),F.members.find(H=>isSupportedAccessor(H,"each"))))return;const[B]=q.arguments;if(!B||!isStringNode(B))return;const W=getStringValue(B);F.type==="test"&&($?.testTitles.includes(W)&&d.report({node:q,messageId:"multipleTestTitle"}),$?.testTitles.push(W)),F.type==="describe"&&($?.describeTitles.includes(W)&&d.report({node:q,messageId:"multipleDescribeTitle"}),$?.describeTitles.push(W))},"CallExpression:exit"(q){isTypeOfVitestFnCall(q,d,["describe"])&&Y.pop()}}}}),RULE_NAME$Z="no-focused-tests",n$2=d=>d.type==="Identifier"&&["it","test","describe"].includes(d.name),a$6=d=>d.type==="Identifier"&&d.name==="only",Ue=createEslintRule({name:RULE_NAME$Z,meta:{type:"problem",docs:{description:"disallow focused tests",recommended:!1},fixable:"code",schema:[{type:"object",properties:{fixable:{type:"boolean",default:!0}},additionalProperties:!1}],messages:{noFocusedTests:"Focused tests are not allowed"}},defaultOptions:[{fixable:!0}],create:d=>{const Y=d.options[0]?.fixable;return{ExpressionStatement(q){if(q.expression.type==="CallExpression"){const{callee:$}=q.expression;if($.type==="MemberExpression"&&n$2($.object)&&a$6($.property)&&d.report({node:$.property,messageId:"noFocusedTests",fix:F=>Y?F.removeRange([$.property.range[0]-1,$.property.range[1]]):null}),$.type==="TaggedTemplateExpression"){const F=$.tag.type==="MemberExpression"?$.tag.object:null;if(!F)return;F.type==="MemberExpression"&&n$2(F.object)&&a$6(F.property)&&d.report({node:F.property,messageId:"noFocusedTests",fix:B=>Y?B.removeRange([F.property.range[0]-1,F.property.range[1]]):null})}}},CallExpression(q){if(q.callee.type==="CallExpression"){const{callee:$}=q.callee;if($.type==="MemberExpression"&&$.object.type==="MemberExpression"&&n$2($.object.object)&&a$6($.object.property)&&$.property.type==="Identifier"&&$.property.name==="each"){const F=$.object.property;d.report({node:$.object.property,messageId:"noFocusedTests",fix:B=>Y?B.removeRange([F.range[0]-1,F.range[1]]):null})}}}}}}),RULE_NAME$Y="no-conditional-tests",_e=createEslintRule({name:RULE_NAME$Y,meta:{type:"problem",docs:{description:"disallow conditional tests",recommended:!1},schema:[],messages:{noConditionalTests:"Avoid using if conditions in a test"}},defaultOptions:[],create(d){return{Identifier:function(Y){["test","it","describe"].includes(Y.name)&&Y.parent?.parent?.parent?.parent?.type==="IfStatement"&&d.report({node:Y,messageId:"noConditionalTests"})}}}}),i$2={typecheck:!1};function parsePluginSettings(d){const Y=typeof d.vitest!="object"||d.vitest===null?{}:d.vitest;return{...i$2,...Y}}const RULE_NAME$X="expect-expect",be=createEslintRule({name:RULE_NAME$X,meta:{type:"suggestion",docs:{description:"enforce having expectation in test body",recommended:!1},schema:[{type:"object",properties:{assertFunctionNames:{type:"array",items:{type:"string"}},additionalTestBlockFunctions:{type:"array",items:{type:"string"}}},additionalProperties:!1}],messages:{noAssertions:"Test has no assertions"}},defaultOptions:[{assertFunctionNames:["expect","assert"],additionalTestBlockFunctions:[]}],create(d,[{assertFunctionNames:Y=["expect"],additionalTestBlockFunctions:q=[]}]){const $=[];parsePluginSettings(d.settings).typecheck&&Y.push("expectTypeOf","assertType");const F=Y.map(x$3);function B(W){for(const H of W){const V=H.type===utils.AST_NODE_TYPES.CallExpression?$.indexOf(H):-1;if(H.type===utils.AST_NODE_TYPES.FunctionDeclaration){const G=d.sourceCode.getDeclaredVariables(H),J=getTestCallExpressionsFromDeclaredVariables(G,d);B(J)}if(V!==-1){$.splice(V,1);break}}}return{CallExpression(W){if(W.callee.type===utils.AST_NODE_TYPES.Identifier&&W.callee.name==="bench"||W?.callee?.type===utils.AST_NODE_TYPES.MemberExpression&&W.callee.property.type===utils.AST_NODE_TYPES.Identifier&&W.callee.property.name==="extend"||W?.callee?.type===utils.AST_NODE_TYPES.MemberExpression&&W.callee.property.type===utils.AST_NODE_TYPES.Identifier&&W.callee.property.name==="skip")return;const H=getNodeName(W)??"";if(isTypeOfVitestFnCall(W,d,["test"])||q.includes(H)){if(W.callee.type===utils.AST_NODE_TYPES.MemberExpression&&isSupportedAccessor(W.callee.property,"todo"))return;$.push(W)}else F.some(V=>V.test(H))&&B(d.sourceCode.getAncestors(W))},"Program:exit"(){$.forEach(W=>{d.report({node:W.callee,messageId:"noAssertions"})})}}}});function x$3(d){const Y=d.split(".").map(q=>q==="**"?"[_a-z\\d\\.]*":q.replace(/\*/gu,"[a-z\\d]*"));return new RegExp(`^${Y.join("\\.")}(\\.|$)`,"ui")}const RULE_NAME$W="consistent-test-it",g$1=(d,Y,q)=>$=>[$.replaceText(d.type===utils.AST_NODE_TYPES.MemberExpression?d.object:d,E$4(Y,q))];function E$4(d,Y){return d===TestCaseName.fit?"test.only":d.startsWith("f")||d.startsWith("x")?d.charAt(0)+Y:Y}function u$4(d){return d===TestCaseName.test?TestCaseName.it:TestCaseName.test}const he=createEslintRule({name:RULE_NAME$W,meta:{type:"suggestion",fixable:"code",docs:{description:"enforce using test or it but not both",recommended:!1},messages:{consistentMethod:"Prefer using {{ testFnKeyWork }} instead of {{ oppositeTestKeyword }}",consistentMethodWithinDescribe:"Prefer using {{ testKeywordWithinDescribe }} instead of {{ oppositeTestKeyword }} within describe"},schema:[{type:"object",properties:{fn:{type:"string",enum:[TestCaseName.test,TestCaseName.it]},withinDescribe:{type:"string",enum:[TestCaseName.test,TestCaseName.it]}},additionalProperties:!1}]},defaultOptions:[{fn:TestCaseName.test,withinDescribe:TestCaseName.it}],create(d){const Y=d.options[0]??{},q=Y.fn||TestCaseName.test,$=Y?.withinDescribe||Y?.fn||TestCaseName?.it,F=q===$?q:void 0;let B=0;return{ImportDeclaration(W){if(F==null||W.source.type!=="Literal"||W.source.value!=="vitest")return;const H=u$4(F);for(const V of W.specifiers)V.type==="ImportSpecifier"&&V.imported.type==="Identifier"&&V.local.name===V.imported.name&&V.local.name===H&&d.report({node:V,data:{testFnKeyWork:q,oppositeTestKeyword:H},messageId:"consistentMethod",fix:G=>{const J=W.specifiers.filter(X=>X.local.name!==H);if(J.length>0){const X=J.map(z=>z.local.name).join(", "),ee=W.specifiers.at(-1)?.range;return ee?G.replaceTextRange([W.specifiers[0].range[0],ee[1]],X):null}return G.replaceText(V.local,F)}})},CallExpression(W){if(W.callee.type===utils.AST_NODE_TYPES.Identifier&&W.callee.name==="bench")return;const H=parseVitestFnCall(W,d);if(!H)return;if(H.type==="describe"){B++;return}const V=W.callee.type===utils.AST_NODE_TYPES.TaggedTemplateExpression?W.callee.tag:W.callee.type===utils.AST_NODE_TYPES.CallExpression?W.callee.callee:W.callee;if(H.type==="test"&&B===0&&!H.name.endsWith(q)){const G=u$4(q);d.report({node:W.callee,data:{testFnKeyWork:q,oppositeTestKeyword:G},messageId:"consistentMethod",fix:g$1(V,H.name,q)})}else if(H.type==="test"&&B>0&&!H.name.endsWith($)){const G=u$4($);d.report({messageId:"consistentMethodWithinDescribe",node:W.callee,data:{testKeywordWithinDescribe:$,oppositeTestKeyword:G},fix:g$1(V,H.name,$)})}},"CallExpression:exit"(W){isTypeOfVitestFnCall(W,d,["describe"])&&B--}}}}),RULE_NAME$V="prefer-to-be",E$3=d=>d.type===utils.AST_NODE_TYPES.Literal&&d.value===null,N$3=d=>E$3(getFirstMatcherArg(d)),c$3=(d,Y)=>isIdentifier(getFirstMatcherArg(d),Y),h$2=d=>Math.floor(d)!==Math.ceil(d),y$3=d=>{let Y=getFirstMatcherArg(d);return Y.type===utils.AST_NODE_TYPES.Literal&&typeof Y.value=="number"&&h$2(Y.value)?!1:(Y.type===utils.AST_NODE_TYPES.UnaryExpression&&Y.operator==="-"&&(Y=Y.argument),Y.type===utils.AST_NODE_TYPES.Literal?!("regex"in Y):Y.type===utils.AST_NODE_TYPES.TemplateLiteral)},o$2=(d,Y,q,$,F)=>{d.report({messageId:`useToBe${Y}`,fix(B){const W=[replaceAccessorFixer(B,q.matcher,`toBe${Y}`)];return q.args?.length&&Y!==""&&W.push(removeExtraArgumentsFixer(B,d,$,0)),F&&W.push(B.removeRange([F.range[0]-1,F.range[1]])),W},node:q.matcher})},ge=createEslintRule({name:RULE_NAME$V,meta:{type:"suggestion",docs:{description:"enforce using toBe()",recommended:!1},schema:[],fixable:"code",messages:{useToBe:"Use `toBe` instead",useToBeUndefined:"Use `toBeUndefined()` instead",useToBeDefined:"Use `toBeDefined()` instead",useToBeNull:"Use `toBeNull()` instead",useToBeNaN:"Use `toBeNaN()` instead"}},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);if(q?.type!=="expect")return;const $=getAccessorValue(q.matcher),F=q.modifiers.find(B=>getAccessorValue(B)==="not");if(F&&["toBeUndefined","toBeDefined"].includes($)){o$2(d,$==="toBeDefined"?"Undefined":"Defined",q,Y,F);return}if(!(!EqualityMatcher.hasOwnProperty($)||q.args.length===0)){if(N$3(q)){o$2(d,"Null",q,Y);return}if(c$3(q,"undefined")){o$2(d,F?"Defined":"Undefined",q,Y);return}if(c$3(q,"NaN")){o$2(d,"NaN",q,Y);return}y$3(q)&&$!==EqualityMatcher.toBe&&o$2(d,"",q,Y)}}}}}),RULE_NAME$U="no-hooks",ke=createEslintRule({name:RULE_NAME$U,meta:{type:"suggestion",docs:{description:"disallow setup and teardown hooks",recommended:!1},schema:[{type:"object",properties:{allow:{type:"array",contains:["beforeAll","beforeEach","afterAll","afterEach"]}},additionalProperties:!1}],messages:{unexpectedHook:"Unexpected '{{ hookName }}' hook"}},defaultOptions:[{allow:[]}],create(d,[{allow:Y=[]}]){return{CallExpression(q){const $=parseVitestFnCall(q,d);$?.type==="hook"&&!Y.includes($.name)&&d.report({node:q,messageId:"unexpectedHook",data:{hookName:$.name}})}}}}),RULE_NAME$T="no-restricted-vi-methods",xe=createEslintRule({name:RULE_NAME$T,meta:{type:"suggestion",docs:{description:"disallow specific `vi.` methods",recommended:!1},schema:[{type:"object",additionalProperties:{type:["string","null"]}}],messages:{restrictedViMethod:"Use of `{{ restriction }}` is disallowed",restrictedViMethodWithMessage:"{{ message }}"}},defaultOptions:[{}],create(d,[Y]){return{CallExpression(q){const $=parseVitestFnCall(q,d);if($?.type!=="vi"||$.members.length===0)return;const F=getAccessorValue($.members[0]);if(F in Y){const B=Y[F];d.report({messageId:B?"restrictedViMethodWithMessage":"restrictedViMethod",data:{message:B,restriction:F},loc:{start:$.members[0].loc.start,end:$.members[$.members.length-1].loc.end}})}}}}}),RULE_NAME$S="consistent-test-filename",o$1=/.*\.test\.[tj]sx?$/,e=/.*\.(test|spec)\.[tj]sx?$/,ve=createEslintRule({name:RULE_NAME$S,meta:{type:"problem",docs:{recommended:!1,requiresTypeChecking:!1,description:"require .spec test file pattern"},messages:{consistentTestFilename:"Use test file name pattern {{ pattern }}"},schema:[{type:"object",additionalProperties:!1,properties:{pattern:{format:"regex",default:o$1.source},allTestPattern:{format:"regex",default:e.source}}}]},defaultOptions:[{pattern:e.source,allTestPattern:e.source}],create:d=>{const Y=d.options[0]??{},{pattern:q=o$1,allTestPattern:$=e}=Y,F=typeof q=="string"?new RegExp(q):q,B=typeof $=="string"?new RegExp($):$,{filename:W}=d;return B.test(W)?{Program:H=>{F.test(W)||d.report({node:H,messageId:"consistentTestFilename",data:{pattern:F.source}})}}:{}}}),RULE_NAME$R="max-expects",Ce=createEslintRule({name:RULE_NAME$R,meta:{docs:{requiresTypeChecking:!1,recommended:!1,description:"enforce a maximum number of expect per test"},messages:{maxExpect:"Too many assertion calls ({{ count }}) - maximum allowed is {{ max }}"},type:"suggestion",schema:[{type:"object",properties:{max:{type:"number"}},additionalProperties:!1}]},defaultOptions:[{max:5}],create(d,[{max:Y}]){let q=0;const $=F=>{(F.parent?.type!==utils.AST_NODE_TYPES.CallExpression||isTypeOfVitestFnCall(F.parent,d,["test"]))&&(q=0)};return{FunctionExpression:$,"FunctionExpression:exit":$,ArrowFunctionExpression:$,"ArrowFunctionExpression:exit":$,CallExpression(F){const B=parseVitestFnCall(F,d);B?.type!=="expect"||B.head.node.parent?.type===utils.AST_NODE_TYPES.MemberExpression||(q+=1,q>Y&&d.report({node:F,messageId:"maxExpect",data:{count:q,max:Y}}))}}}}),RULE_NAME$Q="no-alias-methods",Be=createEslintRule({name:RULE_NAME$Q,meta:{docs:{description:"disallow alias methods",requiresTypeChecking:!1,recommended:!1},messages:{noAliasMethods:"Replace {{ alias }}() with its canonical name {{ canonical }}()"},type:"suggestion",fixable:"code",schema:[]},defaultOptions:[],create(d){const Y={toBeCalled:"toHaveBeenCalled",toBeCalledTimes:"toHaveBeenCalledTimes",toBeCalledWith:"toHaveBeenCalledWith",lastCalledWith:"toHaveBeenLastCalledWith",nthCalledWith:"toHaveBeenNthCalledWith",toReturn:"toHaveReturned",toReturnTimes:"toHaveReturnedTimes",toReturnWith:"toHaveReturnedWith",lastReturnedWith:"toHaveLastReturnedWith",nthReturnedWith:"toHaveNthReturnedWith",toThrowError:"toThrow"};return{CallExpression(q){const $=parseVitestFnCall(q,d);if($?.type!=="expect")return;const{matcher:F}=$,B=getAccessorValue(F);if(B in Y){const W=Y[B];d.report({messageId:"noAliasMethods",data:{alias:B,canonical:W},node:F,fix:H=>[replaceAccessorFixer(H,F,W)]})}}}}}),RULE_NAME$P="no-commented-out-tests";function n$1(d){return/^\s*[xf]?(test|it|describe)(\.\w+|\[['"]\w+['"]\])?\s*\(/mu.test(d.value)}const Se=createEslintRule({name:RULE_NAME$P,meta:{docs:{description:"disallow commented out tests",requiresTypeChecking:!1,recommended:!1},messages:{noCommentedOutTests:"Remove commented out tests - you may want to use `skip` or `only` instead"},schema:[],type:"suggestion"},defaultOptions:[],create(d){const{sourceCode:Y}=d;function q($){n$1($)&&d.report({messageId:"noCommentedOutTests",node:$})}return{Program(){Y.getAllComments().forEach(q)}}}}),RULE_NAME$O="no-conditional-expect",r=d=>d.callee.type===utils.AST_NODE_TYPES.MemberExpression&&isSupportedAccessor(d.callee.property,"catch"),ye=createEslintRule({name:RULE_NAME$O,meta:{type:"problem",docs:{description:"disallow conditional expects",requiresTypeChecking:!1,recommended:!1},messages:{noConditionalExpect:"Avoid calling `expect` inside conditional statements"},schema:[]},defaultOptions:[],create(d){let Y=0,q=!1,$=!1;const F=()=>q&&Y++,B=()=>q&&Y--;return{FunctionDeclaration(W){const H=d.sourceCode.getDeclaredVariables(W);getTestCallExpressionsFromDeclaredVariables(H,d).length>0&&(q=!0)},CallExpression(W){const{type:H}=parseVitestFnCall(W,d)??{};H==="test"&&(q=!0),r(W)&&($=!0),q&&H==="expect"&&Y>0&&d.report({messageId:"noConditionalExpect",node:W}),$&&H==="expect"&&d.report({messageId:"noConditionalExpect",node:W})},"CallExpression:exit"(W){isTypeOfVitestFnCall(W,d,["test"])&&(q=!1),r(W)&&($=!1)},CatchClause:F,"CatchClause:exit":B,IfStatement:F,"IfStatement:exit":B,SwitchStatement:F,"SwitchStatement:exit":B,ConditionalExpression:F,"ConditionalExpression:exit":B,LogicalExpression:F,"LogicalExpression:exit":B}}}),RULE_NAME$N="no-import-node-test",Ie=createEslintRule({name:RULE_NAME$N,meta:{docs:{description:"disallow importing `node:test`",recommended:!1},type:"suggestion",messages:{noImportNodeTest:"Import from `vitest` instead of `node:test`"},fixable:"code",schema:[]},defaultOptions:[],create(d){return{ImportDeclaration(Y){Y.source.value==="node:test"&&d.report({messageId:"noImportNodeTest",node:Y,fix:q=>q.replaceText(Y.source,Y.source.raw.replace("node:test","vitest"))})}}}}),RULE_NAME$M="no-conditional-in-test",De=createEslintRule({name:RULE_NAME$M,meta:{docs:{description:"disallow conditional tests",requiresTypeChecking:!1,recommended:!1},messages:{noConditionalInTest:"Remove conditional tests"},schema:[],type:"problem"},defaultOptions:[],create(d){return{IfStatement(Y){Y.parent?.parent?.parent?.type==="CallExpression"&&isTypeOfVitestFnCall(Y.parent?.parent?.parent,d,["test","it"])&&d.report({messageId:"noConditionalInTest",node:Y})}}}}),RULE_NAME$L="no-disabled-tests",He=createEslintRule({name:RULE_NAME$L,meta:{type:"suggestion",docs:{description:"disallow disabled tests",recommended:!1},messages:{missingFunction:"Test is missing function argument",pending:"Call to pending()",pendingSuite:"Call to pending() within test suite",pendingTest:"Call to pending() within test",disabledSuite:"Disabled test suite - if you want to skip a test suite temporarily, use .todo() instead",disabledTest:"Disabled test - if you want to skip a test temporarily, use .todo() instead"},schema:[]},defaultOptions:[],create(d){let Y=0,q=0;return{CallExpression($){const F=parseVitestFnCall($,d);if(!F)return;F.type==="describe"&&Y++,F.type==="test"&&(q++,$.arguments.length<2&&F.members.every(W=>getAccessorValue(W)==="skip")&&d.report({messageId:"missingFunction",node:$}));const B=F.members.find(W=>getAccessorValue(W)==="skip");(F.name.startsWith("x")||B!==void 0)&&d.report({messageId:F.type==="describe"?"disabledSuite":"disabledTest",node:B??F.head.node})},"CallExpression:exit"($){const F=parseVitestFnCall($,d);F&&(F.type==="describe"&&Y--,F.type==="test"&&q--)},'CallExpression[callee.name="pending"]'($){const F=getScope(d,$);resolveScope(F,"pending")||(q>0?d.report({messageId:"pendingTest",node:$}):Y>0?d.report({messageId:"pendingSuite",node:$}):d.report({messageId:"pending",node:$}))}}}}),RULE_NAME$K="no-done-callback",P$1=(d,Y,q)=>{if(Y)return d.arguments[1];const $=parseVitestFnCall(d,q);return $?.type==="hook"&&d.arguments.length>=1?d.arguments[0]:$?.type==="test"&&d.arguments.length>=2?d.arguments[1]:null},Oe=createEslintRule({name:RULE_NAME$K,meta:{type:"suggestion",docs:{description:"disallow using a callback in asynchronous tests and hooks",recommended:!1},deprecated:!0,schema:[],messages:{noDoneCallback:"Return a promise instead of relying on callback parameter",suggestWrappingInPromise:"Wrap in `new Promise({{ callback }} => ...`",useAwaitInsteadOfCallback:"Use `await` instead of callback in async function"},hasSuggestions:!0},defaultOptions:[],create(d){return{CallExpression(Y){const q=/\.each$|\.concurrent$/.test(getNodeName(Y.callee)??"");if(q&&Y.callee.type!==utils.AST_NODE_TYPES.TaggedTemplateExpression||d.sourceCode.getAncestors(Y).some(W=>W.type!==utils.AST_NODE_TYPES.CallExpression||!isTypeOfVitestFnCall(W,d,["describe","test"])?!1:W.callee.type===utils.AST_NODE_TYPES.MemberExpression&&isSupportedAccessor(W.callee.property,"concurrent")))return;const $=P$1(Y,q,d),F=Number(q);if(!$||!isFunction($)||$.params.length!==1+F)return;const B=$.params[F];if(B.type!==utils.AST_NODE_TYPES.Identifier){d.report({node:B,messageId:"noDoneCallback"});return}if($.async){d.report({node:B,messageId:"useAwaitInsteadOfCallback"});return}d.report({node:Y,messageId:"noDoneCallback",suggest:[{messageId:"suggestWrappingInPromise",data:{callback:B.name},fix(W){const{body:H,params:V}=$,{sourceCode:G}=d,J=G.getFirstToken(H),X=G.getLastToken(H),[ee]=V,z=V[V.length-1],te=G.getTokenBefore(ee);let Q=G.getTokenAfter(z);if(Q?.value===","&&(Q=G.getTokenAfter(Q)),!J||!X||!te||!Q)throw new Error(`Unexpected null when attempting to fix ${d.filename} - please file an issue at https://github/veritem/eslint-plugin-vitest`);let Z=W.replaceText(ee,"()");te.value==="("&&Q.value===")"&&(Z=W.removeRange([te.range[1],Q.range[0]]));let oe=`new Promise(${B.name} => `,ne=")",se=!0;return H.type===utils.AST_NODE_TYPES.BlockStatement&&(oe=`return ${oe}{`,ne+="}",se=!1),[Z,se?W.insertTextBefore(J,oe):W.insertTextAfter(J,oe),W.insertTextAfter(X,ne)]}}]})}}}}),RULE_NAME$J="no-duplicate-hooks",qe=createEslintRule({name:RULE_NAME$J,meta:{docs:{recommended:!1,description:"disallow duplicate hooks and teardown hooks",requiresTypeChecking:!1},messages:{noDuplicateHooks:"Duplicate {{ hook }} in describe block"},schema:[],type:"suggestion"},defaultOptions:[],create(d){const Y=[{}];return{CallExpression(q){const $=parseVitestFnCall(q,d);if($?.type==="describe"&&Y.push({}),$?.type!=="hook")return;const F=Y[Y.length-1];F[$.name]||=0,F[$.name]+=1,F[$.name]>1&&d.report({messageId:"noDuplicateHooks",data:{hook:$.name},node:q})},"CallExpression:exit"(q){isTypeOfVitestFnCall(q,d,["describe"])&&Y.pop()}}}}),RULE_NAME$I="no-large-snapshots",m$4=(d,Y,{maxSize:q=50,allowedSnapshots:$={}})=>{const F=Y.loc.start.line,B=Y.loc.end.line-F;if(!Object.keys($).every(node_path.isAbsolute))throw new Error("All paths for allowedSnapshots must be absolute. You can use JS config and `path.resolve`");let W=!1;if(Y.type===utils.AST_NODE_TYPES.ExpressionStatement&&"left"in Y.expression&&Y.expression.left.type===utils.AST_NODE_TYPES.MemberExpression&&isSupportedAccessor(Y.expression.left.property)){const H=d.filename,V=$[H];if(V){const G=getAccessorValue(Y.expression.left.property);W=V.some(J=>J instanceof RegExp?J.test(G):G===J)}}!W&&B>q&&d.report({node:Y,messageId:q===0?"noSnapShot":"tooLongSnapShot",data:{lineCount:B,lineLimit:q}})},Fe=createEslintRule({name:RULE_NAME$I,meta:{docs:{description:"disallow large snapshots",recommended:!1},messages:{noSnapShot:"`{{ lineCount }}`s should begin with lowercase",tooLongSnapShot:"Expected vitest snapshot to be smaller than {{ lineLimit }} lines but was {{ lineCount }} lines long"},type:"suggestion",schema:[{type:"object",properties:{maxSize:{type:"number"},inlineMaxSize:{type:"number"},allowedSnapshots:{type:"object",additionalProperties:{type:"array"}}},additionalProperties:!1}]},defaultOptions:[{}],create(d,[Y]){return d.filename.endsWith(".snap")?{ExpressionStatement(q){m$4(d,q,Y)}}:{CallExpression(q){const $=parseVitestFnCall(q,d);$?.type==="expect"&&["toMatchInlineSnapshot","toThrowErrorMatchingInlineSnapshot"].includes(getAccessorValue($.matcher))&&$.args.length&&m$4(d,$.args[0],{...Y,maxSize:Y.inlineMaxSize??Y.maxSize})}}}}),RULE_NAME$H="no-interpolation-in-snapshots",Pe=createEslintRule({name:RULE_NAME$H,meta:{type:"problem",docs:{description:"disallow string interpolation in snapshots",recommended:!1},fixable:"code",schema:[],messages:{noInterpolationInSnapshots:"Do not use string interpolation in snapshots"}},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);q?.type==="expect"&&["toMatchInlineSnapshot","toThrowErrorMatchingInlineSnapshot"].includes(getAccessorValue(q.matcher))&&q.args.forEach($=>{$.type===utils.AST_NODE_TYPES.TemplateLiteral&&$.expressions.length>0&&d.report({messageId:"noInterpolationInSnapshots",node:$})})}}}}),t="__mocks__",p$2=d=>d.split(node_path.posix.sep).includes(t),s=d=>isStringNode(d)&&p$2(getStringValue(d)),RULE_NAME$G="no-mocks-import",je=createEslintRule({name:RULE_NAME$G,meta:{type:"problem",docs:{description:"disallow importing from __mocks__ directory",recommended:!1},messages:{noMocksImport:`Mocks should not be manually imported from a ${t} directory. Instead use \`vi.mock\` and import from the original module path`},schema:[]},defaultOptions:[],create(d){return{ImportDeclaration(Y){s(Y.source)&&d.report({node:Y,messageId:"noMocksImport"})},'CallExpression[callee.name="require"]'(Y){const[q]=Y.arguments;q&&s(q)&&d.report({node:q,messageId:"noMocksImport"})}}}}),RULE_NAME$F="no-restricted-matchers",l$3=(d,Y)=>ModifierName.hasOwnProperty(Y)||Y.endsWith(".not")?d.startsWith(Y):d===Y,Ve=createEslintRule({name:RULE_NAME$F,meta:{docs:{description:"disallow the use of certain matchers",recommended:!1},type:"suggestion",schema:[{type:"object",additionalProperties:{type:["string","null"]}}],messages:{restrictedChain:"use of {{ restriction }} is disallowed",restrictedChainWithMessage:"{{ message }}"}},defaultOptions:[{}],create(d,[Y]){return{CallExpression(q){const $=parseVitestFnCall(q,d);if($?.type!=="expect")return;const F=$.members.map(B=>getAccessorValue(B)).join(".");for(const[B,W]of Object.entries(Y))if(l$3(F,B)){d.report({messageId:W?"restrictedChainWithMessage":"restrictedChain",data:{message:W,restriction:B},loc:{start:$.members[0].loc.start,end:$.members[$.members.length-1].loc.end}});break}}}}}),RULE_NAME$E="no-standalone-expect",a$5=(d,Y)=>{const q=d.parent;if(!q)throw new Error("Unexpected block statement. If you feel like this is a bug report https://github.com/veritem/eslint-plugin-vitest/issues/new");if(q.type===utils.AST_NODE_TYPES.FunctionDeclaration)return"function";if(isFunction(q)&&q.parent){const $=q.parent;if($.type===utils.AST_NODE_TYPES.VariableDeclarator)return"function";if($.type===utils.AST_NODE_TYPES.CallExpression&&isTypeOfVitestFnCall($,Y,["describe"]))return"describe"}return null},Ke=createEslintRule({name:RULE_NAME$E,meta:{docs:{description:"disallow using `expect` outside of `it` or `test` blocks",recommended:!1},type:"suggestion",messages:{noStandaloneExpect:"Expect must be called inside a test block"},schema:[{type:"object",properties:{additionalTestBlockFunctions:{type:"array",items:{type:"string"}}},additionalProperties:!1}]},defaultOptions:[{additionalTestBlockFunctions:[]}],create(d,[{additionalTestBlockFunctions:Y=[]}]){const q=[],$=F=>Y.includes(getNodeName(F)||"");return{CallExpression(F){const B=parseVitestFnCall(F,d);if(B?.type==="expect"){if(B.head.node.parent?.type===utils.AST_NODE_TYPES.MemberExpression&&B.members.length===1&&!["assertions","hasAssertions"].includes(getAccessorValue(B.members[0])))return;const W=q[q.length-1];(!W||W===DescribeAlias.describe)&&d.report({node:F,messageId:"noStandaloneExpect"});return}(B?.type==="test"||$(F))&&q.push("test"),F.callee.type===utils.AST_NODE_TYPES.TaggedTemplateExpression&&q.push("template")},"CallExpression:exit"(F){const B=q[q.length-1];(B==="test"&&(isTypeOfVitestFnCall(F,d,["test"])||$(F))&&F.callee.type!==utils.AST_NODE_TYPES.MemberExpression||B==="template"&&F.callee.type===utils.AST_NODE_TYPES.TaggedTemplateExpression)&&q.pop()},BlockStatement(F){const B=a$5(F,d);B&&q.push(B)},"BlockStatement:exit"(F){a$5(F,d)&&q.pop()},ArrowFunctionExpression(F){F.parent?.type!==utils.AST_NODE_TYPES.CallExpression&&q.push("arrow")},"ArrowFunctionExpression:exit"(){q[q.length-1]==="arrow"&&q.pop()}}}}),RULE_NAME$D="no-test-prefixes",$e=createEslintRule({name:RULE_NAME$D,meta:{docs:{description:"disallow using `test` as a prefix",recommended:!1},type:"suggestion",messages:{usePreferredName:'Use "{{ preferredNodeName }}" instead'},fixable:"code",schema:[]},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);if(q?.type!=="describe"&&q?.type!=="test"||q.name[0]!=="f"&&q.name[0]!=="x")return;const $=[q.name.slice(1),q.name[0]==="f"?"only":"skip",...q.members.map(B=>getAccessorValue(B))].join("."),F=Y.callee.type===utils.AST_NODE_TYPES.TaggedTemplateExpression?Y.callee.tag:Y.callee.type===utils.AST_NODE_TYPES.CallExpression?Y.callee.callee:Y.callee;d.report({messageId:"usePreferredName",node:Y.callee,data:{preferredNodeName:$},fix:B=>[B.replaceText(F,$)]})}}}}),RULE_NAME$C="no-test-return-statement",u$3=d=>{const[,Y]=d;return Y&&isFunction(Y)&&Y.body.type===utils.AST_NODE_TYPES.BlockStatement?Y.body.body:[]},Ge=createEslintRule({name:RULE_NAME$C,meta:{type:"problem",docs:{description:"disallow return statements in tests",recommended:!1},schema:[],messages:{noTestReturnStatement:"Return statements are not allowed in tests"}},defaultOptions:[],create(d){return{CallExpression(Y){if(!isTypeOfVitestFnCall(Y,d,["test"]))return;const q=u$3(Y.arguments).find($=>$.type===utils.AST_NODE_TYPES.ReturnStatement);q&&d.report({messageId:"noTestReturnStatement",node:q})},FunctionDeclaration(Y){const q=d.sourceCode.getDeclaredVariables(Y);if(getTestCallExpressionsFromDeclaredVariables(q,d).length===0)return;const $=Y.body.body.find(F=>F.type===utils.AST_NODE_TYPES.ReturnStatement);$&&d.report({messageId:"noTestReturnStatement",node:$})}}}}),RULE_NAME$B="prefer-called-with",We=createEslintRule({name:RULE_NAME$B,meta:{docs:{description:"enforce using `toBeCalledWith()` or `toHaveBeenCalledWith()`",recommended:!1},messages:{preferCalledWith:"Prefer {{ matcherName }}With(/* expected args */)"},type:"suggestion",fixable:"code",schema:[]},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);if(q?.type!=="expect"||q.modifiers.some(B=>getAccessorValue(B)==="not"))return;const{matcher:$}=q,F=getAccessorValue($);["toBeCalled","toHaveBeenCalled"].includes(F)&&d.report({data:{matcherName:F},messageId:"preferCalledWith",node:$,fix:B=>[B.replaceText($,`${F}With`)]})}}}}),RULE_NAME$A="valid-title",_=d=>["f","x"].includes(d.charAt(0))?d.substring(1):d,T$2=d=>d.type===utils.AST_NODE_TYPES.TemplateLiteral?`\`${d.quasis[0].value.raw}\``:d.raw,A$2={type:"array",items:{type:"string"},minItems:1,maxItems:2,additionalItems:!1},p$1=d=>{const[Y,q]=Array.isArray(d)?d:[d];return[new RegExp(Y,"u"),q]};function j(d){return!!(d.flags&t__default.TypeFlags.StringLike)}const b=d=>{if(typeof d=="string"||Array.isArray(d)){const Y=p$1(d);return{describe:Y,test:Y,it:Y}}return{describe:d.describe?p$1(d.describe):null,test:d.test?p$1(d.test):null,it:d.it?p$1(d.it):null}},E$2=d=>isStringNode(d.right)?!0:d.left.type===utils.AST_NODE_TYPES.BinaryExpression?E$2(d.left):isStringNode(d.left),ze=createEslintRule({name:RULE_NAME$A,meta:{docs:{description:"enforce valid titles",recommended:!1},messages:{titleMustBeString:"Test title must be a string, a function or class name",emptyTitle:"{{ functionName }} should not have an empty title",duplicatePrefix:"should not have duplicate prefix",accidentalSpace:"should not have leading or trailing spaces",disallowedWord:'"{{ word }}" is not allowed in test title',mustNotMatch:"{{ functionName }} should not match {{ pattern }}",mustMatch:"{{ functionName }} should match {{ pattern }}",mustNotMatchCustom:"{{ message }}",mustMatchCustom:"{{ message }}"},type:"suggestion",schema:[{type:"object",properties:{ignoreTypeOfDescribeName:{type:"boolean",default:!1},allowArguments:{type:"boolean",default:!1},disallowedWords:{type:"array",items:{type:"string"}}},patternProperties:{[/^must(?:Not)?Match$/u.source]:{oneOf:[{type:"string"},A$2,{type:"object",propertyNames:{type:"string",enum:["describe","test","it"]},additionalProperties:{oneOf:[{type:"string"},A$2]}}]}},additionalProperties:!1}],fixable:"code"},defaultOptions:[{ignoreTypeOfDescribeName:!1,allowArguments:!1,disallowedWords:[]}],create(d,[{ignoreTypeOfDescribeName:Y,allowArguments:q,disallowedWords:$=[],mustNotMatch:F,mustMatch:B}]){const W=new RegExp(`\\b(${$.join("|")})\\b`,"iu"),H=b(F??{}),V=b(B??{}),G=parsePluginSettings(d.settings);return{CallExpression(J){const X=parseVitestFnCall(J,d);if(X?.type!=="describe"&&X?.type!=="test"&&X?.type!=="it"||X.members&&X.members[0]&&X.members[0].type===utils.AST_NODE_TYPES.Identifier&&X.members[0].name==="extend")return;const ee=ie=>{d.report({messageId:"emptyTitle",data:{functionName:X.type==="describe"?DescribeAlias.describe:TestCaseName.test},node:ie})},[z]=J.arguments;if(G.typecheck){const ie=utils.ESLintUtils.getParserServices(d).getTypeAtLocation(z);if(isClassOrFunctionType(ie))return;if(j(ie)){isStringNode(z)&&!getStringValue(z)&&ee(J);return}}if(!z||q&&z.type===utils.AST_NODE_TYPES.Identifier)return;if(!isStringNode(z)){if(z.type===utils.AST_NODE_TYPES.BinaryExpression&&E$2(z))return;z.type!==utils.AST_NODE_TYPES.TemplateLiteral&&!(Y&&X.type==="describe")&&d.report({messageId:"titleMustBeString",loc:z.loc});return}const te=getStringValue(z);if(!te){ee(J);return}if($.length>0){const ie=W.exec(te);if(ie){d.report({messageId:"disallowedWord",data:{word:ie[1]},node:z});return}}te.trim().length!==te.length&&d.report({messageId:"accidentalSpace",node:z,fix:ie=>[ie.replaceTextRange(z.range,T$2(z).replace(/^([`'"]) +?/u,"$1").replace(/ +?([`'"])$/u,"$1"))]});const Q=_(X.name),[Z]=te.split(" ");Z.toLowerCase()===Q&&d.report({messageId:"duplicatePrefix",node:z,fix:ie=>[ie.replaceTextRange(z.range,T$2(z).replace(/^([`'"]).+? /u,"$1"))]});const oe=Q,[ne,se]=H[oe]??[];if(ne&&ne.test(te)){d.report({messageId:se?"mustNotMatchCustom":"mustNotMatch",node:z,data:{functionName:oe,pattern:ne,message:se}});return}const[re,ae]=V[oe]??[];re&&(re.test(te)||d.report({messageId:ae?"mustMatchCustom":"mustMatch",node:z,data:{functionName:oe,pattern:re,message:ae}}))}}}}),RULE_NAME$z="valid-expect",h$1=["toReject","toResolve"],D=d=>(d.type===utils.AST_NODE_TYPES.ArrayExpression&&d.parent&&d.parent.type===utils.AST_NODE_TYPES.CallExpression&&(d=d.parent),d.type===utils.AST_NODE_TYPES.CallExpression&&d.callee.type===utils.AST_NODE_TYPES.MemberExpression&&isSupportedAccessor(d.callee.object,"Promise")&&d.parent?d:null),A$1=({start:d,end:Y})=>`${d.line}:${d.column}-${Y.line}:${Y.column}`,O$1=d=>d.parent.type===utils.AST_NODE_TYPES.Property&&d.type===utils.AST_NODE_TYPES.FunctionExpression?d.parent:d;function M$2(d){const Y=d.parent?.parent;return Y&&Y.type===utils.AST_NODE_TYPES.CallExpression&&Y.callee.type===utils.AST_NODE_TYPES.MemberExpression&&isSupportedAccessor(Y.callee.property)&&["then","catch"].includes(getAccessorValue(Y.callee.property))&&Y.parent?M$2(Y):d}const U=d=>d.parent?.parent&&[utils.AST_NODE_TYPES.CallExpression,utils.AST_NODE_TYPES.ArrayExpression].includes(d.parent.type)?D(d.parent):null,N$2=({parent:d})=>d?isFunction(d)?d:N$2(d):null,w$1=(d,Y)=>Y&&d.type===utils.AST_NODE_TYPES.ReturnStatement?!0:d.type===utils.AST_NODE_TYPES.ConditionalExpression&&d.parent?w$1(d.parent,Y):[utils.AST_NODE_TYPES.ArrowFunctionExpression,utils.AST_NODE_TYPES.AwaitExpression].includes(d.type),Je=createEslintRule({name:RULE_NAME$z,meta:{docs:{description:"enforce valid `expect()` usage",recommended:!1},messages:{tooManyArgs:"Expect takes at most {{ amount}} argument{{ s }}",notEnoughArgs:"Expect requires at least {{ amount }} argument{{ s }}",modifierUnknown:"Expect has an unknown modifier",matcherNotFound:"Expect must have a corresponding matcher call",matcherNotCalled:"Matchers must be called to assert",asyncMustBeAwaited:"Async assertions must be awaited{{ orReturned }}",promisesWithAsyncAssertionsMustBeAwaited:"Promises which return async assertions must be awaited{{ orReturned }}"},type:"suggestion",fixable:"code",schema:[{type:"object",properties:{alwaysAwait:{type:"boolean",default:!1},asyncMatchers:{type:"array",items:{type:"string"}},minArgs:{type:"number",minimum:1},maxArgs:{type:"number",minimum:1}},additionalProperties:!1}]},defaultOptions:[{alwaysAwait:!1,asyncMatchers:h$1,minArgs:1,maxArgs:1}],create:(d,[{alwaysAwait:Y,asyncMatchers:q=h$1,minArgs:$=1,maxArgs:F=1}])=>{const B=new Set,W=[],H=J=>B.add(A$1(J)),V=J=>B.has(A$1(J)),G=J=>{let X=J,{parent:ee}=J;for(;ee&&ee.type===utils.AST_NODE_TYPES.MemberExpression;)X=ee,ee=ee.parent;return X};return{CallExpression(J){const X=parseVitestFnCallWithReason(J,d),ee=parsePluginSettings(d.settings);if(typeof X=="string"){const re=J.parent?.type===utils.AST_NODE_TYPES.MemberExpression?G(J.parent).property:J;if(X==="matcher-not-found"){d.report({messageId:"matcherNotFound",node:re});return}if(X==="matcher-not-called"&&d.report({messageId:isSupportedAccessor(re)&&ModifierName.hasOwnProperty(getAccessorValue(re))?"matcherNotFound":"matcherNotCalled",node:re}),X==="modifier-unknown"){d.report({messageId:"modifierUnknown",node:re});return}return}else if(X?.type==="expectTypeOf"&&ee.typecheck||X?.type!=="expect"||X.modifiers.some(re=>re.type===utils.AST_NODE_TYPES.Identifier&&re.name=="to"))return;const{parent:z}=X.head.node;if(z?.type!==utils.AST_NODE_TYPES.CallExpression)return;if(z.arguments.length<$){const re=getAccessorValue(X.head.node).length,ae={start:{column:z.loc.start.column+re,line:z.loc.start.line},end:{column:z.loc.start.column+re+1,line:z.loc.start.line}};d.report({messageId:"notEnoughArgs",data:{amount:$,s:$===1?"":"s"},node:z,loc:ae})}if(z.arguments.length>F){if(z.arguments.length===2){const ce=z.arguments[1].type===utils.AST_NODE_TYPES.Literal&&typeof z.arguments[1].value=="string",le=z.arguments[1].type===utils.AST_NODE_TYPES.TemplateLiteral;if(ce||le)return}const{start:re}=z.arguments[F].loc,{end:ae}=z.arguments[z.arguments.length-1].loc,ie={start:re,end:{column:ae.column+1,line:ae.line}};d.report({messageId:"tooManyArgs",data:{amount:F,s:F===1?"":"s"},node:z,loc:ie})}const{matcher:te}=X,Q=te.parent.parent,Z=X.modifiers.some(re=>getAccessorValue(re)!=="not")||q.includes(getAccessorValue(te));if(!Q?.parent||!Z)return;const oe=Q.parent.type===utils.AST_NODE_TYPES.ArrayExpression,ne=M$2(Q),se=U(ne)||ne;se.parent&&!w$1(se.parent,!Y)&&!V(se.loc)&&(W.push({messageId:se===ne?"asyncMustBeAwaited":"promisesWithAsyncAssertionsMustBeAwaited",node:se}),oe&&H(se.loc))},"Program:exit"(){const J=[];W.forEach(({node:X,messageId:ee},z)=>{const te=Y?"":" or returned";d.report({loc:X.loc,data:{orReturned:te},messageId:ee,node:X,fix(Q){const Z=N$2(X);if(!Z)return null;const oe=J.some(se=>se.text==="async ");if(!Z.async&&!oe){const se=O$1(Z);J.push(Q.insertTextBefore(se,"async "))}const ne=X.parent?.type===utils.AST_NODE_TYPES.ReturnStatement?X.parent:null;if(Y&&ne){const se=d.sourceCode.getText(ne).replace("return","await");J.push(Q.replaceText(ne,se))}else J.push(Q.insertTextBefore(X,"await "));return z===W.length-1?J:null}})})}}}}),isBooleanLiteral=d=>d.type===utils.AST_NODE_TYPES.Literal&&typeof d.value=="boolean",isBooleanEqualityMatcher=d=>{const Y=getAccessorValue(d.matcher);if(["toBeTruthy","toBeFalsy"].includes(Y))return!0;if(d.args.length!==1)return!1;const q=getFirstMatcherArg(d);return EqualityMatcher.hasOwnProperty(Y)&&isBooleanLiteral(q)},isInstanceOfBinaryExpression=(d,Y)=>d.type===utils.AST_NODE_TYPES.BinaryExpression&&d.operator==="instanceof"&&isSupportedAccessor(d.right,Y),hasOnlyOneArgument=d=>d.arguments.length===1,RULE_NAME$y="prefer-to-be-object",Qe=createEslintRule({name:RULE_NAME$y,meta:{type:"suggestion",docs:{description:"enforce using toBeObject()",recommended:!1},fixable:"code",messages:{preferToBeObject:"Prefer toBeObject() to test if a value is an object"},schema:[]},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);if(q?.type!=="expectTypeOf")return;if(isParsedInstanceOfMatcherCall(q,"Object")){d.report({node:q.matcher,messageId:"preferToBeObject",fix:B=>[B.replaceTextRange([q.matcher.range[0],q.matcher.range[1]+8],"toBeObject()")]});return}const{parent:$}=q.head.node;if($?.type!==utils.AST_NODE_TYPES.CallExpression)return;const[F]=$.arguments;!F||!isBooleanEqualityMatcher(q)||!isInstanceOfBinaryExpression(F,"Object")||d.report({node:q.matcher,messageId:"preferToBeObject",fix(B){const W=[B.replaceText(q.matcher,"toBeObject"),B.removeRange([F.left.range[1],F.range[1]])];let H=getAccessorValue(q.matcher)==="toBeFalsy";if(q.args.length){const[V]=q.args;W.push(B.remove(V)),H=V.type===utils.AST_NODE_TYPES.Literal&&followTypeAssertionChain$1(V).value===!1}if(H){const V=q.modifiers.find(G=>getAccessorValue(G)==="not");W.push(V?B.removeRange([V.range[0]-1,V.range[1]]):B.insertTextBefore(q.matcher,"not."))}return W}})}}}}),RULE_NAME$x="prefer-to-be-truthy",n=d=>d.type===utils.AST_NODE_TYPES.Literal&&d.value===!0,Xe=createEslintRule({name:RULE_NAME$x,meta:{type:"suggestion",docs:{description:"enforce using `toBeTruthy`",recommended:!1},messages:{preferToBeTruthy:"Prefer using `toBeTruthy` to test value is `true`"},fixable:"code",schema:[]},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);(q?.type==="expect"||q?.type==="expectTypeOf")&&q.args.length===1&&n(getFirstMatcherArg(q))&&EqualityMatcher.hasOwnProperty(getAccessorValue(q.matcher))&&d.report({node:q.matcher,messageId:"preferToBeTruthy",fix:$=>[$.replaceText(q.matcher,"toBeTruthy"),$.remove(q.args[0])]})}}}}),RULE_NAME$w="prefer-to-be-falsy",c$2=d=>d.type===utils.AST_NODE_TYPES.Literal&&d.value===!1,Ye=createEslintRule({name:RULE_NAME$w,meta:{type:"suggestion",docs:{description:"enforce using toBeFalsy()",recommended:!1},fixable:"code",schema:[],messages:{preferToBeFalsy:"Prefer using toBeFalsy()"}},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);(q?.type==="expect"||q?.type==="expectTypeOf")&&q.args.length===1&&c$2(getFirstMatcherArg(q))&&EqualityMatcher.hasOwnProperty(getAccessorValue(q.matcher))&&d.report({node:q.matcher,messageId:"preferToBeFalsy",fix:$=>[$.replaceText(q.matcher,"toBeFalsy"),$.remove(q.args[0])]})}}}}),RULE_NAME$v="prefer-to-have-length",Ze=createEslintRule({name:RULE_NAME$v,meta:{type:"suggestion",docs:{description:"enforce using toHaveLength()",recommended:!1},fixable:"code",messages:{preferToHaveLength:"Prefer toHaveLength()"},schema:[]},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);if(q?.type!=="expect")return;const{parent:$}=q.head.node;if($?.type!==utils.AST_NODE_TYPES.CallExpression)return;const[F]=$.arguments,{matcher:B}=q;!EqualityMatcher.hasOwnProperty(getAccessorValue(B))||F?.type!==utils.AST_NODE_TYPES.MemberExpression||!isSupportedAccessor(F.property,"length")||d.report({node:B,messageId:"preferToHaveLength",fix(W){return[W.removeRange([F.property.range[0]-1,F.range[1]]),W.replaceTextRange([B.parent.object.range[1],B.parent.range[1]],".toHaveLength")]}})}}}}),RULE_NAME$u="prefer-equality-matcher",er=createEslintRule({name:RULE_NAME$u,meta:{type:"suggestion",docs:{description:"enforce using the built-in quality matchers",recommended:!1},messages:{useEqualityMatcher:"Prefer using one of the equality matchers instead",suggestEqualityMatcher:"Use `{{ equalityMatcher }}`"},hasSuggestions:!0,schema:[]},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);if(q?.type!=="expect"||q.args.length===0)return;const{parent:$}=q.head.node;if($?.type!==utils.AST_NODE_TYPES.CallExpression)return;const{arguments:[F],range:[,B]}=$,{matcher:W}=q,H=getFirstMatcherArg(q);if(F?.type!==utils.AST_NODE_TYPES.BinaryExpression||F.operator!=="==="&&F.operator!=="!=="||!EqualityMatcher.hasOwnProperty(getAccessorValue(W))||!isBooleanLiteral(H))return;const V=H.value,[G]=q.modifiers,J=q.modifiers.some(z=>getAccessorValue(z)==="not"),X=(F.operator==="!=="?!V:V)===J,ee=z=>te=>{const{sourceCode:Q}=d;let Z=G&&getAccessorValue(G)!=="not"?`.${getAccessorValue(G)}`:"";return X&&(Z+=`.${ModifierName.not}`),[te.replaceText(F,Q.getText(F.left)),te.replaceTextRange([B,W.parent.range[1]],`${Z}.${z}`),te.replaceText(H,Q.getText(F.right))]};d.report({messageId:"useEqualityMatcher",suggest:["toBe","toEqual","toStrictEqual"].map(z=>({messageId:"suggestEqualityMatcher",data:{equalityMatcher:z},fix:ee(z)})),node:W})}}}}),RULE_NAME$t="prefer-strict-equal",rr=createEslintRule({name:RULE_NAME$t,meta:{type:"suggestion",docs:{description:"enforce strict equal over equal",recommended:!1},messages:{useToStrictEqual:"Use `toStrictEqual()` instead",suggestReplaceWithStrictEqual:"Replace with `toStrictEqual()`"},schema:[],hasSuggestions:!0},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);if(q?.type!=="expect")return;const{matcher:$}=q;isSupportedAccessor($,"toEqual")&&d.report({messageId:"useToStrictEqual",node:$,suggest:[{messageId:"suggestReplaceWithStrictEqual",fix:F=>[replaceAccessorFixer(F,$,EqualityMatcher.toStrictEqual)]}]})}}}}),RULE_NAME$s="prefer-expect-resolves",or=createEslintRule({name:RULE_NAME$s,meta:{type:"suggestion",docs:{description:"enforce using `expect().resolves` over `expect(await ...)` syntax",recommended:!1},fixable:"code",messages:{expectResolves:"Use `expect().resolves` instead"},schema:[]},defaultOptions:[],create:d=>({CallExpression(Y){const q=parseVitestFnCall(Y,d);if(q?.type!=="expect")return;const{parent:$}=q.head.node;if($?.type!==utils.AST_NODE_TYPES.CallExpression)return;const[F]=$.arguments;F?.type===utils.AST_NODE_TYPES.AwaitExpression&&d.report({node:F,messageId:"expectResolves",fix(B){return[B.insertTextBefore($,"await "),B.removeRange([F.range[0],F.argument.range[0]]),B.insertTextAfter($,".resolves")]}})}})}),RULE_NAME$r="prefer-each",tr=createEslintRule({name:RULE_NAME$r,meta:{type:"suggestion",docs:{description:"enforce using `each` rather than manual loops",recommended:!1},schema:[],messages:{preferEach:"Prefer using `{{ fn }}.each` rather than a manual loop"}},defaultOptions:[],create(d){const Y=[];let q=!1;const $=()=>Y.length===1&&Y[0]==="test"?"it":"describe",F=()=>{Y.length===0||q||(Y.length=0)},B=W=>{Y.length===0||q||(d.report({node:W,messageId:"preferEach",data:{fn:$()}}),Y.length=0)};return{ForStatement:F,"ForStatement:exit":B,ForInStatement:F,"ForInStatement:exit":B,ForOfStatement:F,"ForOfStatement:exit":B,CallExpression(W){const{type:H}=parseVitestFnCall(W,d)??{};(H==="hook"||H==="describe"||H==="test")&&Y.push(H),H==="test"&&(q=!0)},"CallExpression:exit"(W){const{type:H}=parseVitestFnCall(W,d)??{};H==="test"&&(q=!1)}}}}),RULE_NAME$q="prefer-hooks-on-top",ar=createEslintRule({name:RULE_NAME$q,meta:{type:"suggestion",docs:{description:"enforce having hooks before any test cases",recommended:!1},messages:{noHookOnTop:"Hooks should come before test cases"},schema:[]},defaultOptions:[],create(d){const Y=[!1];return{CallExpression(q){isTypeOfVitestFnCall(q,d,["test"])&&(Y[Y.length-1]=!0),Y[Y.length-1]&&isTypeOfVitestFnCall(q,d,["hook"])&&d.report({messageId:"noHookOnTop",node:q}),Y.push(!1)},"CallExpression:exit"(){Y.pop()}}}}),RULE_NAME$p="prefer-hooks-in-order",a$4=["beforeAll","beforeEach","afterEach","afterAll"],nr=createEslintRule({name:RULE_NAME$p,meta:{type:"suggestion",docs:{description:"enforce having hooks in consistent order",recommended:!1},messages:{reorderHooks:"`{{ currentHook }}` hooks should be before any `{{ previousHook }}` hooks"},schema:[]},defaultOptions:[],create(d){let Y=-1,q=!1;return{CallExpression($){if(q)return;const F=parseVitestFnCall($,d);if(F?.type!=="hook"){Y=-1;return}q=!0;const B=F.name,W=a$4.indexOf(B);if(W<Y){d.report({messageId:"reorderHooks",data:{previousHook:a$4[Y],currentHook:B},node:$}),q=!1;return}Y=W},"CallExpression:exit"($){if(isTypeOfVitestFnCall($,d,["hook"])){q=!1;return}q||(Y=-1)}}}}),RULE_NAME$o="prefer-mock-promise-shorthand",l$2=(d,Y)=>`${d}${Y?"Once":""}`,f=d=>d.body.type!==utils.AST_NODE_TYPES.BlockStatement?d.body:d.body.body[0]?.type===utils.AST_NODE_TYPES.ReturnStatement?d.body.body[0].argument:null,sr=createEslintRule({name:RULE_NAME$o,meta:{type:"suggestion",docs:{description:"enforce mock resolved/rejected shorthands for promises",recommended:!1},messages:{useMockShorthand:"Prefer {{ replacement }}"},schema:[],fixable:"code"},defaultOptions:[],create(d){const Y=(q,$,F,B=F)=>{if(B?.type!==utils.AST_NODE_TYPES.CallExpression)return;const W=getNodeName(B);if(W!=="Promise.resolve"&&W!=="Promise.reject")return;const H=l$2(W.endsWith("reject")?"mockRejectedValue":"mockResolvedValue",$);d.report({node:q,messageId:"useMockShorthand",data:{replacement:H},fix(V){const{sourceCode:G}=d;return B.arguments.length>1?null:[V.replaceText(q,H),V.replaceText(F,B.arguments.length===1?G.getText(B.arguments[0]):"undefined")]}})};return{CallExpression(q){if(q.callee.type!==utils.AST_NODE_TYPES.MemberExpression||!isSupportedAccessor(q.callee.property)||q.arguments.length===0)return;const $=getAccessorValue(q.callee.property),F=$.endsWith("Once");if($===l$2("mockReturnValue",F))Y(q.callee.property,F,q.arguments[0]);else if($===l$2("mockImplementation",F)){const[B]=q.arguments;if(!isFunction(B)||B.params.length!==0)return;Y(q.callee.property,F,B,f(B))}}}}}),a$3=node_module.createRequire(typeof document>"u"?require("url").pathToFileURL(__filename).href:_documentCurrentScript&&_documentCurrentScript.tagName.toUpperCase()==="SCRIPT"&&_documentCurrentScript.src||new URL("index.cjs",document.baseURI).href),c$1=node_module.createRequire(a$3.resolve("eslint"));c$1.resolve("espree");const p=new Set([utils.AST_NODE_TYPES.Program,utils.AST_NODE_TYPES.BlockStatement,utils.AST_NODE_TYPES.SwitchCase,utils.AST_NODE_TYPES.SwitchStatement]),isValidParent=d=>p.has(d),isTokenASemicolon=d=>d.value===";"&&d.type===utils.AST_TOKEN_TYPES.Punctuator,getActualLastToken=(d,Y)=>{const q=d.getLastToken(Y),$=d.getTokenBefore(q),F=d.getTokenAfter(q);return $&&F&&$.range[0]>=Y.range[0]&&isTokenASemicolon(q)&&q.loc.start.line!==$.loc.end.line&&q.loc.end.line===F.loc.start.line?$:q},getPaddingLineSequences=(d,Y,q)=>{const $=[];let F=getActualLastToken(q,d);if(Y.loc.start.line-d.loc.end.line>=2)do{const B=q.getTokenAfter(F,{includeComments:!0});B.loc.start.line-F.loc.end.line>=2&&$.push([F,B]),F=B}while(F.range[0]<Y.range[0]);return $},areTokensOnSameLine=(d,Y)=>d.loc.end.line===Y.loc.start.line,E$1=d=>d.type===utils.AST_NODE_TYPES.TSAsExpression||d.type===utils.AST_NODE_TYPES.TSTypeAssertion,followTypeAssertionChain=d=>E$1(d)?followTypeAssertionChain(d.expression):d,RULE_NAME$n="prefer-vi-mocked",m$3=["Mock","MockedFunction","MockedClass","MockedObject"],ir=createEslintRule({name:RULE_NAME$n,meta:{type:"suggestion",docs:{description:"require `vi.mocked()` over `fn as Mock`",requiresTypeChecking:!0,recommended:!1},fixable:"code",messages:{useViMocked:"Prefer `vi.mocked()`"},schema:[]},defaultOptions:[],create(d){function Y(q){const{typeAnnotation:$}=q;if($.type!==utils.AST_NODE_TYPES.TSTypeReference)return;const{typeName:F}=$;if(F.type!==utils.AST_NODE_TYPES.Identifier||!m$3.includes(F.name))return;const B=d.sourceCode.text.slice(...followTypeAssertionChain(q.expression).range);d.report({node:q,messageId:"useViMocked",fix(W){return W.replaceText(q,`vi.mocked(${B})`)}})}return{TSAsExpression(q){q.parent.type!==utils.AST_NODE_TYPES.TSAsExpression&&Y(q)},TSTypeAssertion(q){Y(q)}}}}),RULE_NAME$m="prefer-snapshot-hint",E=["toMatchSnapshot","toThrowErrorMatchingSnapshot"],x$2=E,S$3=d=>{if(d.args.length===0)return!0;if(!isSupportedAccessor(d.matcher,"toMatchSnapshot"))return d.args.length!==1;if(d.args.length===2)return!1;const[Y]=d.args;return!isStringNode(Y)},mr=createEslintRule({name:RULE_NAME$m,meta:{type:"suggestion",docs:{description:"enforce including a hint with external snapshots",recommended:!1},messages:{missingHint:"You should provide a hint for this snapshot"},schema:[{type:"string",enum:["always","multi"]}]},defaultOptions:["multi"],create(d,[Y]){const q=[];let $=0;const F=[],B=()=>{for(const V of q)S$3(V)&&d.report({messageId:"missingHint",node:V.matcher})},W=()=>{$++},H=()=>{$--,Y==="always"&&(B(),q.length=0),Y==="multi"&&$===0&&(q.length>1&&B(),q.length=0)};return{"Program:exit"(){W(),H()},FunctionExpression:W,"FunctionExpression:exit":H,ArrowFunctionExpression:W,"ArrowFunctionExpression:exit":H,"CallExpression:exit"(V){isTypeOfVitestFnCall(V,d,["describe","test"])&&($=F.pop()??0)},CallExpression(V){const G=parseVitestFnCall(V,d);if(G?.type!=="expect"){(G?.type==="describe"||G?.type==="test")&&(F.push($),$=0);return}const J=getAccessorValue(G.matcher);x$2.includes(J)&&q.push(G)}}}}),RULE_NAME$l="valid-describe-callback",o=d=>{const[Y]=d,q=d[d.length-1];return{start:Y.loc.start,end:q.loc.end}},i$1=(d,Y)=>d.members.every(q=>getAccessorValue(q)!=="each")&&Y.params.length,u$2=(d,Y)=>{d.body.forEach(q=>{q.type===utils.AST_NODE_TYPES.ReturnStatement&&Y.report({messageId:"unexpectedReturnInDescribe",node:q})})},pr=createEslintRule({name:RULE_NAME$l,meta:{type:"problem",docs:{description:"enforce valid describe callback",recommended:!1},messages:{nameAndCallback:"Describe requires a name and callback arguments",secondArgumentMustBeFunction:"Second argument must be a function",unexpectedDescribeArgument:"Unexpected argument in describe callback",unexpectedReturnInDescribe:"Unexpected return statement in describe callback"},schema:[]},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);if(q?.type!=="describe"||q?.members[0]?.type===utils.AST_NODE_TYPES.Identifier&&q.members[0].name==="todo")return;if(Y.arguments.length<1)return d.report({messageId:"nameAndCallback",loc:Y.loc});const[,$,F]=Y.arguments;if(!$){d.report({messageId:"nameAndCallback",loc:o(Y.arguments)});return}if(!isFunction($)){if(F&&isFunction(F)){i$1(q,F)&&d.report({messageId:"unexpectedDescribeArgument",node:F}),F.body.type===utils.AST_NODE_TYPES.CallExpression&&d.report({messageId:"unexpectedReturnInDescribe",node:F}),F.body.type===utils.AST_NODE_TYPES.BlockStatement&&u$2(F.body,d);return}d.report({messageId:"secondArgumentMustBeFunction",loc:o(Y.arguments)});return}i$1(q,$)&&d.report({messageId:"unexpectedDescribeArgument",node:$}),$.body.type===utils.AST_NODE_TYPES.CallExpression&&d.report({messageId:"unexpectedReturnInDescribe",node:$}),$.body.type===utils.AST_NODE_TYPES.BlockStatement&&u$2($.body,d)}}}}),RULE_NAME$k="require-top-level-describe",Er=createEslintRule({name:RULE_NAME$k,meta:{docs:{description:"enforce that all tests are in a top-level describe",recommended:!1},messages:{tooManyDescribes:"There should not be more than {{ max }} describe{{ s }} at the top level",unexpectedTestCase:"All test cases must be wrapped in a describe block",unexpectedHook:"All hooks must be wrapped in a describe block"},type:"suggestion",schema:[{type:"object",properties:{maxNumberOfTopLevelDescribes:{type:"number",minimum:1}},additionalProperties:!1}]},defaultOptions:[{}],create(d){const{maxNumberOfTopLevelDescribes:Y=1/0}=d.options[0]??{};let q=0,$=0;return{CallExpression(F){const B=parseVitestFnCall(F,d);if(B){if(B.type==="describe"){$++,$===1&&(q++,q>Y&&d.report({node:F,messageId:"tooManyDescribes",data:{max:Y,s:Y===1?"":"s"}}));return}if($===0){if(B.type==="test"){d.report({node:F,messageId:"unexpectedTestCase"});return}B.type==="hook"&&d.report({node:F,messageId:"unexpectedHook"})}}},"CallExpression:exit"(F){isTypeOfVitestFnCall(F,d,["describe"])&&$--}}}}),RULE_NAME$j="require-to-throw-message",lr=createEslintRule({name:RULE_NAME$j,meta:{type:"suggestion",docs:{description:"require toThrow() to be called with an error message",recommended:!1},schema:[],messages:{addErrorMessage:"Add an error message to {{ matcherName }}()"}},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);if(q?.type!=="expect")return;const{matcher:$}=q,F=getAccessorValue($);q.args.length===0&&["toThrow","toThrowError"].includes(F)&&!q.modifiers.some(B=>getAccessorValue(B)==="not")&&d.report({messageId:"addErrorMessage",data:{matcherName:F},node:$})}}}}),RULE_NAME$i="require-hook",S$2=(d,Y)=>parseVitestFnCall(d,Y)?!0:!!getNodeName(d)?.startsWith("vi"),m$2=d=>d.type===utils.AST_NODE_TYPES.Literal&&d.value===null||isIdentifier(d,"undefined"),a$2=(d,Y,q=[])=>{switch(d.type){case utils.AST_NODE_TYPES.ExpressionStatement:return a$2(d.expression,Y,q);case utils.AST_NODE_TYPES.CallExpression:return!(S$2(d,Y)||q.includes(getNodeName(d)));case utils.AST_NODE_TYPES.VariableDeclaration:return d.kind==="const"?!1:d.declarations.some(({init:$})=>$!==null&&!m$2($));default:return!1}},fr=createEslintRule({name:RULE_NAME$i,meta:{docs:{description:"require setup and teardown to be within a hook",recommended:!1},messages:{useHook:"This should be done within a hook"},type:"suggestion",schema:[{type:"object",properties:{allowedFunctionCalls:{type:"array",items:{type:"string"}}},additionalProperties:!1}]},defaultOptions:[{allowedFunctionCalls:[]}],create(d){const{allowedFunctionCalls:Y}=d.options[0]??{},q=$=>{for(const F of $)a$2(F,d,Y)&&d.report({node:F,messageId:"useHook"})};return{Program($){q($.body)},CallExpression($){if(!isTypeOfVitestFnCall($,d,["describe"])||$.arguments.length<2)return;const[,F]=$.arguments;!isFunction(F)||F.body.type!==utils.AST_NODE_TYPES.BlockStatement||q(F.body.body)}}}}),RULE_NAME$h="require-local-test-context-for-concurrent-snapshots",cr=createEslintRule({name:RULE_NAME$h,meta:{docs:{description:"require local Test Context for concurrent snapshot tests",recommended:!1},messages:{requireLocalTestContext:"Use local Test Context instead"},type:"problem",schema:[]},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);q===null||q.type!=="expect"||q.type==="expect"&&q.head.type==="testContext"||!["toMatchSnapshot","toMatchInlineSnapshot","toMatchFileSnapshot","toThrowErrorMatchingSnapshot","toThrowErrorMatchingInlineSnapshot"].includes(Y.callee?.property.name)||!d.sourceCode.getAncestors(Y).some($=>$.type!==utils.AST_NODE_TYPES.CallExpression||!isTypeOfVitestFnCall($,d,["describe","test"])?!1:$.callee.type===utils.AST_NODE_TYPES.MemberExpression&&isSupportedAccessor($.callee.property,"concurrent"))||d.report({node:Y,messageId:"requireLocalTestContext"})}}}}),RULE_NAME$g="prefer-todo",S$1=d=>d.members.some(Y=>getAccessorValue(Y)!=="skip")||d.name.startsWith("x")?!1:!d.name.startsWith("f");function T$1(d){return isFunction(d)?d.body.type===utils.AST_NODE_TYPES.BlockStatement&&!d.body.body.length:!1}function a$1(d,Y){return d.members.length?replaceAccessorFixer(Y,d.members[0],"todo"):Y.replaceText(d.head.node,`${d.head.local}.todo`)}const Nr=createEslintRule({name:RULE_NAME$g,meta:{type:"layout",docs:{description:"enforce using `test.todo`",recommended:!1},messages:{emptyTest:"Prefer todo test case over empty test case",unimplementedTest:"Prefer todo test case over unimplemented test case"},fixable:"code",schema:[]},defaultOptions:[],create(d){return{CallExpression(Y){const[q,$]=Y.arguments,F=parseVitestFnCall(Y,d);!q||F?.type!=="test"||!S$1(F)||!isStringNode(q)||($&&T$1($)&&d.report({messageId:"emptyTest",node:Y,fix:B=>[B.removeRange([q.range[1],$.range[1]]),a$1(F,B)]}),hasOnlyOneArgument(Y)&&d.report({messageId:"unimplementedTest",node:Y,fix:B=>a$1(F,B)}))}}}}),RULE_NAME$f="prefer-spy-on",u$1=d=>"object"in d?d.object:d.callee.type===utils.AST_NODE_TYPES.MemberExpression?d.callee.object:null,a=d=>{if(d.type!==utils.AST_NODE_TYPES.CallExpression&&d.type!==utils.AST_NODE_TYPES.MemberExpression)return null;const Y=u$1(d);return Y?Y.type===utils.AST_NODE_TYPES.Identifier?d.type===utils.AST_NODE_TYPES.CallExpression&&getNodeName(d.callee)==="vi.fn"?d:null:a(Y):null},S=(d,Y)=>{if(d.parent?.type===utils.AST_NODE_TYPES.MemberExpression&&d.parent.property.type===utils.AST_NODE_TYPES.Identifier&&d.parent.property.name==="mockImplementation")return"";const[q]=d.arguments,$=q&&Y.sourceCode.getText(q);return $?`.mockImplementation(${$})`:".mockImplementation()"},dr=createEslintRule({name:RULE_NAME$f,meta:{type:"suggestion",docs:{description:"enforce using `vi.spyOn`",recommended:!1},messages:{useViSpayOn:"Use `vi.spyOn` instead"},fixable:"code",schema:[]},defaultOptions:[],create(d){return{AssignmentExpression(Y){const{left:q,right:$}=Y;if(q.type!==utils.AST_NODE_TYPES.MemberExpression)return;const F=a($);F&&d.report({node:Y,messageId:"useViSpayOn",fix(B){const W=q.property.type===utils.AST_NODE_TYPES.Identifier&&!q.computed?"'":"",H=S(F,d);return[B.insertTextBefore(q,"vi.spyOn("),B.replaceTextRange([q.object.range[1],q.property.range[0]],`, ${W}`),B.replaceTextRange([q.property.range[1],F.range[1]],`${W})${H}`)]}})}}}}),RULE_NAME$e="prefer-comparison-matcher",g=d=>isStringNode(d)||d?.type===utils.AST_NODE_TYPES.TemplateLiteral,C=d=>g(d.left)||g(d.right),M$1=d=>{switch(d){case">":return"<=";case"<":return">=";case">=":return"<";case"<=":return">"}return null},O=(d,Y)=>{switch(Y?M$1(d):d){case">":return"toBeGreaterThan";case"<":return"toBeLessThan";case">=":return"toBeGreaterThanOrEqual";case"<=":return"toBeLessThanOrEqual"}return null},Ar=createEslintRule({name:RULE_NAME$e,meta:{type:"suggestion",docs:{description:"enforce using the built-in comparison matchers",recommended:!1},schema:[],fixable:"code",messages:{useToBeComparison:"Prefer using `{{ preferredMatcher }}` instead"}},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);if(q?.type!=="expect"||q.args.length===0)return;const{parent:$}=q.head.node;if($?.type!==utils.AST_NODE_TYPES.CallExpression)return;const{arguments:[F],range:[,B]}=$,{matcher:W}=q,H=getFirstMatcherArg(q);if(F?.type!==utils.AST_NODE_TYPES.BinaryExpression||C(F)||!EqualityMatcher.hasOwnProperty(getAccessorValue(W))||!isBooleanLiteral(H))return;const[V]=q.modifiers,G=q.modifiers.some(X=>getAccessorValue(X)==="not"),J=O(F.operator,H.value===G);J&&d.report({fix(X){const{sourceCode:ee}=d,z=V&&getAccessorValue(V)!=="not"?`.${getAccessorValue(V)}`:"";return[X.replaceText(F,ee.getText(F.left)),X.replaceTextRange([B,W.parent.range[1]],`${z}.${J}`),X.replaceText(H,ee.getText(F.right))]},messageId:"useToBeComparison",data:{preferredMatcher:J},node:W})}}}}),RULE_NAME$d="prefer-describe-function-title",Mr=createEslintRule({name:RULE_NAME$d,meta:{type:"problem",docs:{description:"enforce using a function as a describe title over an equivalent string",recommended:!1},fixable:"code",schema:[],messages:{preferFunction:"Enforce using a function over an equivalent string"}},defaultOptions:[],create(d){return{CallExpression(Y){if(Y.arguments.length<2)return;const[q]=Y.arguments;if(q.type!==utils.AST_NODE_TYPES.Literal||typeof q.value!="string")return;const $=q.value;if(!d.filename.includes(`${$}.`)||parseVitestFnCall(Y,d)?.type!=="describe")return;const F=getModuleScope(d,Y)?.set.get($)?.defs[0];if(F?.type==="ImportBinding"){if(parsePluginSettings(d.settings).typecheck){const B=utils.ESLintUtils.getParserServices(d).getTypeAtLocation(F.node);if(!isClassOrFunctionType(B))return}d.report({node:q,messageId:"preferFunction",fix(B){return B.replaceText(q,$)}})}}}}}),RULE_NAME$c="prefer-to-contain",T=d=>d.type===utils.AST_NODE_TYPES.CallExpression&&d.callee.type===utils.AST_NODE_TYPES.MemberExpression&&isSupportedAccessor(d.callee.property,"includes")&&hasOnlyOneArgument(d)&&d.arguments[0].type!==utils.AST_NODE_TYPES.SpreadElement,ur=createEslintRule({name:RULE_NAME$c,meta:{docs:{description:"enforce using toContain()",recommended:!1},messages:{useToContain:"Use toContain() instead"},fixable:"code",type:"suggestion",schema:[]},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);if(q?.type!=="expect"||q.args.length===0)return;const{parent:$}=q.head.node;if($?.type!==utils.AST_NODE_TYPES.CallExpression)return;const{arguments:[F],range:[,B]}=$,{matcher:W}=q,H=getFirstMatcherArg(q);if(!F||H.type===utils.AST_NODE_TYPES.SpreadElement||!EqualityMatcher.hasOwnProperty(getAccessorValue(W))||!isBooleanLiteral(H)||!T(F))return;const V=q.modifiers.some(G=>getAccessorValue(G)==="not");d.report({fix(G){const{sourceCode:J}=d,X=H.value===V;return[G.removeRange([F.callee.property.range[0]-1,F.range[1]]),G.replaceTextRange([B,W.parent.range[1]],X?`.${ModifierName.not}.toContain`:".toContain"),G.replaceText(q.args[0],J.getText(F.arguments[0]))]},messageId:"useToContain",node:W})}}}}),RULE_NAME$b="prefer-expect-assertions",L=d=>{let Y=d;for(;Y;){if(Y.parent?.type===utils.AST_NODE_TYPES.BlockStatement)return Y.parent.body[0]===Y;if(Y.parent?.type===utils.AST_NODE_TYPES.ArrowFunctionExpression)return!0;Y=Y.parent}throw new Error("Could not find parent block statement")},y$2=(d,Y,q)=>({messageId:"suggestRemovingExtraArguments",fix:$=>removeExtraArgumentsFixer($,d,Y,q)}),wr=createEslintRule({name:"prefer-expect-assertions",meta:{docs:{description:"enforce using expect assertions instead of callbacks",recommended:!1},messages:{hasAssertionsTakesNoArguments:"`expect.hasAssertions` expects no arguments",assertionsRequiresOneArgument:"`expect.assertions` excepts a single argument of type number",assertionsRequiresNumberArgument:"This argument should be a number",haveExpectAssertions:"Every test should have either `expect.assertions(<number of assertions>)` or `expect.hasAssertions()` as its first expression",suggestAddingHasAssertions:"Add `expect.hasAssertions()`",suggestAddingAssertions:"Add `expect.assertions(<number of assertions>)`",suggestRemovingExtraArguments:"Remove extra arguments"},type:"suggestion",hasSuggestions:!0,schema:[{type:"object",properties:{onlyFunctionsWithAsyncKeyword:{type:"boolean"},onlyFunctionsWithExpectInLoop:{type:"boolean"},onlyFunctionsWithExpectInCallback:{type:"boolean"}},additionalProperties:!1}]},defaultOptions:[{onlyFunctionsWithAsyncKeyword:!1,onlyFunctionsWithExpectInCallback:!1,onlyFunctionsWithExpectInLoop:!1}],create(d,[Y]){let q=0,$=!1,F=!1,B=!1,W=null,H=!1,V=!1;const G=Q=>!!(!Y.onlyFunctionsWithAsyncKeyword&&!Y.onlyFunctionsWithExpectInCallback&&!Y.onlyFunctionsWithExpectInLoop||Y.onlyFunctionsWithAsyncKeyword&&Q.async||Y.onlyFunctionsWithExpectInCallback&&$||Y.onlyFunctionsWithExpectInLoop&&F);function J(Q,Z){if(getAccessorValue(Q.members[0])==="hasAssertions"){Q.args.length&&d.report({messageId:"hasAssertionsTakesNoArguments",node:Q.matcher,suggest:[y$2(d,Z,0)]});return}if(Q.args.length!==1){let{loc:ne}=Q.matcher;const se=[];Q.args.length&&(ne=Q.args[1].loc,se.push(y$2(d,Z,1))),d.report({messageId:"assertionsRequiresOneArgument",suggest:se,loc:ne});return}const[oe]=Q.args;oe.type===utils.AST_NODE_TYPES.Literal&&typeof oe.value=="number"&&Number.isInteger(oe.value)||d.report({messageId:"assertionsRequiresNumberArgument",node:oe})}const X=()=>H&&q++,ee=()=>H&&q--,z=()=>V=!0,te=()=>V=!1;return{FunctionExpression:X,"FunctionExpression:exit":ee,ArrowFunctionExpression:X,"ArrowFunctionExpression:exit":ee,ForStatement:z,"ForStatement:exit":te,ForInStatement:z,"ForInStatement:exit":te,ForOfStatement:z,"ForOfStatement:exit":te,CallExpression(Q){const Z=parseVitestFnCall(Q,d);if(Z?.type==="test"){H=!0;return}Z?.head.type==="testContext"&&Z.members[0].type===utils.AST_NODE_TYPES.Identifier&&Z.members[0].name==="expect"&&(W=`${Z.head.local}`),Z?.type==="expect"&&H&&(q===1&&L(Q)&&Z.head.node.parent?.type===utils.AST_NODE_TYPES.MemberExpression&&Z.members.length===1&&["assertions","hasAssertions"].includes(getAccessorValue(Z.members[0]))&&(J(Z,Q),B=!0),V&&(F=!0),q>1&&($=!0))},"CallExpression:exit"(Q){if(!isTypeOfVitestFnCall(Q,d,["test"])||(H=!1,Q.arguments.length<2))return;const[,Z]=Q.arguments;if(!isFunction(Z)||!G(Z))return;if(F=!1,$=!1,B){B=!1;return}const oe=[];if(Z.body.type===utils.AST_NODE_TYPES.BlockStatement){const ne=W?`${W}.`:"";oe.push(["suggestAddingHasAssertions",`${ne}expect.hasAssertions();`],["suggestAddingAssertions",`${ne}expect.assertions();`])}d.report({messageId:"haveExpectAssertions",node:Q,suggest:oe.map(([ne,se])=>({messageId:ne,fix:re=>re.insertTextBeforeRange([Z.body.range[0]+1,Z.body.range[1]],se)}))})}}}});var PaddingType=(d=>(d[d.Any=0]="Any",d[d.Always=1]="Always",d))(PaddingType||{}),StatementType=(d=>(d[d.Any=0]="Any",d[d.AfterAllToken=1]="AfterAllToken",d[d.AfterEachToken=2]="AfterEachToken",d[d.BeforeAllToken=3]="BeforeAllToken",d[d.BeforeEachToken=4]="BeforeEachToken",d[d.DescribeToken=5]="DescribeToken",d[d.ExpectToken=6]="ExpectToken",d[d.ExpectTypeOfToken=7]="ExpectTypeOfToken",d[d.FdescribeToken=8]="FdescribeToken",d[d.FitToken=9]="FitToken",d[d.ItToken=10]="ItToken",d[d.TestToken=11]="TestToken",d[d.XdescribeToken=12]="XdescribeToken",d[d.XitToken=13]="XitToken",d[d.XtestToken=14]="XtestToken",d))(StatementType||{});const x$1=(d,Y,q)=>{const{sourceCode:$,ruleContext:F}=q;getPaddingLineSequences(d,Y,$).length>0||F.report({node:Y,messageId:"missingPadding",fix(B){let W=getActualLastToken($,d);const H=$.getFirstTokenBetween(W,Y,{includeComments:!0,filter(G){return areTokensOnSameLine(W,G)?(W=G,!1):!0}})||Y,V=areTokensOnSameLine(W,H)?`

`:`
`;return B.insertTextAfter(W,V)}})},m$1={0:()=>!0,1:x$1},y$1=()=>{let d=null;return{get prevNode(){return d.prevNode},set prevNode(Y){d.prevNode=Y},enter(){d={upper:d,prevNode:null}},exit(){d=d.upper}}},i=d=>(Y,q)=>{let $=Y;if($.type===utils.AST_NODE_TYPES.ExpressionStatement){$.expression.type===utils.AST_NODE_TYPES.AwaitExpression&&($=$.expression.argument);const F=q.getFirstToken($);return F?.type===utils.AST_TOKEN_TYPES.Identifier&&F.value===d}return!1},A={0:()=>!0,1:i("afterAll"),2:i("afterEach"),3:i("beforeAll"),4:i("beforeEach"),5:i("describe"),6:i("expect"),7:i("expectTypeOf"),8:i("fdescribe"),9:i("fit"),10:i("it"),11:i("test"),12:i("xdescribe"),13:i("xit"),14:i("xtest")},l$1=(d,Y,q)=>{let $=d;const{sourceCode:F}=q;for(;$.type===utils.AST_NODE_TYPES.LabeledStatement;)$=$.body;return Array.isArray(Y)?Y.some(B=>l$1($,B,q)):A[Y]($,F)},N$1=(d,Y,q)=>{const{configs:$}=q,F=B=>m$1[B](d,Y,q);for(let B=$.length-1;B>=0;--B){const{prevStatementType:W,nextStatementType:H,paddingType:V}=$[B];if(l$1(d,W,q)&&l$1(Y,H,q))return F(V)}return F(0)},u=(d,Y)=>{const{scopeInfo:q}=Y;isValidParent(d?.parent.type)&&(q.prevNode&&N$1(q.prevNode,d,Y),q.prevNode=d)},createPaddingRule=(d,Y,q,$=!1)=>createEslintRule({name:d,meta:{docs:{description:Y},fixable:"whitespace",deprecated:$,messages:{missingPadding:"expect blank line before this statement"},schema:[],type:"suggestion"},defaultOptions:[],create(F){const B={ruleContext:F,sourceCode:F.sourceCode??F.getSourceCode(),scopeInfo:y$1(),configs:q},{scopeInfo:W}=B;return{Program:W.enter,"Program:exit":W.exit,BlockStatement:W.enter,"BlockStatement:exit":W.exit,SwitchStatement:W.enter,"SwitchStatement:exit":W.exit,":statement":H=>u(H,B),SwitchCase(H){u(H,B),W.enter()},"SwitchCase:exit":W.exit}}}),RULE_NAME$a="padding-around-after-all-blocks",config$6=[{paddingType:PaddingType.Always,prevStatementType:StatementType.Any,nextStatementType:StatementType.AfterAllToken},{paddingType:PaddingType.Always,prevStatementType:StatementType.AfterAllToken,nextStatementType:StatementType.Any}],Rr=createPaddingRule(RULE_NAME$a,"Enforce padding around `afterAll` blocks",config$6),RULE_NAME$9="padding-around-after-each-blocks",config$5=[{paddingType:PaddingType.Always,prevStatementType:StatementType.Any,nextStatementType:StatementType.AfterEachToken},{paddingType:PaddingType.Always,prevStatementType:StatementType.AfterEachToken,nextStatementType:StatementType.Any}],Lr=createPaddingRule(RULE_NAME$9,"Enforce padding around `afterEach` blocks",config$5),RULE_NAME$8="padding-around-before-all-blocks",config$4=[{paddingType:PaddingType.Always,prevStatementType:StatementType.Any,nextStatementType:StatementType.BeforeAllToken},{paddingType:PaddingType.Always,prevStatementType:StatementType.BeforeAllToken,nextStatementType:StatementType.Any}],Ur=createPaddingRule(RULE_NAME$8,"Enforce padding around `beforeAll` blocks",config$4),RULE_NAME$7="padding-around-before-each-blocks",config$3=[{paddingType:PaddingType.Always,prevStatementType:StatementType.Any,nextStatementType:StatementType.BeforeEachToken},{paddingType:PaddingType.Always,prevStatementType:StatementType.BeforeEachToken,nextStatementType:StatementType.Any}],_r=createPaddingRule(RULE_NAME$7,"Enforce padding around `beforeEach` blocks",config$3),RULE_NAME$6="padding-around-describe-blocks",config$2=[{paddingType:PaddingType.Always,prevStatementType:StatementType.Any,nextStatementType:[StatementType.DescribeToken,StatementType.FdescribeToken,StatementType.XdescribeToken]},{paddingType:PaddingType.Always,prevStatementType:[StatementType.DescribeToken,StatementType.FdescribeToken,StatementType.XdescribeToken],nextStatementType:StatementType.Any}],br=createPaddingRule(RULE_NAME$6,"Enforce padding around `describe` blocks",config$2),RULE_NAME$5="padding-around-expect-groups",config$1=[{paddingType:PaddingType.Always,prevStatementType:StatementType.Any,nextStatementType:StatementType.ExpectToken},{paddingType:PaddingType.Always,prevStatementType:StatementType.ExpectToken,nextStatementType:StatementType.Any},{paddingType:PaddingType.Any,prevStatementType:StatementType.ExpectToken,nextStatementType:StatementType.ExpectToken},{paddingType:PaddingType.Always,prevStatementType:StatementType.Any,nextStatementType:StatementType.ExpectTypeOfToken},{paddingType:PaddingType.Always,prevStatementType:StatementType.ExpectTypeOfToken,nextStatementType:StatementType.Any},{paddingType:PaddingType.Any,prevStatementType:StatementType.ExpectTypeOfToken,nextStatementType:StatementType.ExpectTypeOfToken}],hr=createPaddingRule(RULE_NAME$5,"Enforce padding around `expect` groups",config$1),RULE_NAME$4="padding-around-test-blocks",config=[{paddingType:PaddingType.Always,prevStatementType:StatementType.Any,nextStatementType:[StatementType.TestToken,StatementType.ItToken,StatementType.FitToken,StatementType.XitToken,StatementType.XtestToken]},{paddingType:PaddingType.Always,prevStatementType:[StatementType.TestToken,StatementType.ItToken,StatementType.FitToken,StatementType.XitToken,StatementType.XtestToken],nextStatementType:StatementType.Any}],gr=createPaddingRule(RULE_NAME$4,"Enforce padding around `test` blocks",config),RULE_NAME$3="padding-around-all",Tr=createPaddingRule(RULE_NAME$3,"Enforce padding around vitest functions",[...config$6,...config$5,...config$4,...config$3,...config$2,...config$1,...config]),RULE_NAME$2="valid-expect-in-promise",w=["toRejectWith","toResolveWith"],c=d=>{if(d.type===utils.AST_NODE_TYPES.CallExpression&&d.callee.type===utils.AST_NODE_TYPES.MemberExpression&&isSupportedAccessor(d.callee.property)){if(d.arguments.length===0)return!1;switch(getAccessorValue(d.callee.property)){case"then":return d.arguments.length<3;case"catch":case"finally":return d.arguments.length<2}}return!1},k=(d,Y)=>{const q=parseVitestFnCall(d,Y);if(q?.type!=="test")return!1;const $=q.members.some(W=>getAccessorValue(W)==="each");if($&&d.callee.type!==utils.AST_NODE_TYPES.TaggedTemplateExpression)return!0;const[,F]=d.arguments,B=Number($);return F&&isFunction(F)&&F.params.length===1+B},x=(d,Y)=>{const{name:q}=Y;if(d.argument===null)return!1;if(d.argument.type===utils.AST_NODE_TYPES.CallExpression&&d.argument.arguments.length>0){const $=getNodeName(d.argument);if(["Promise.all","Promise.allSettled"].includes($)){const[F]=d.argument.arguments;if(F.type===utils.AST_NODE_TYPES.ArrayExpression&&F.elements.some(B=>B&&isIdentifier(B,q)))return!0}if(["Promise.resolve","Promise.reject"].includes($)&&d.argument.arguments.length===1)return isIdentifier(d.argument.arguments[0],q)}return isIdentifier(d.argument,q)},h=(d,Y)=>{for(const q of Y)if(q?.type===utils.AST_NODE_TYPES.AwaitExpression&&isIdentifier(q.argument,d)||q?.type===utils.AST_NODE_TYPES.ArrayExpression&&h(d,q.elements))return!0;return!1},M=(d,Y)=>{let q=Y;for(;q;){if(q.type===utils.AST_NODE_TYPES.CallExpression){if(h(d,q.arguments))return!0;q=q.callee}if(q.type!==utils.AST_NODE_TYPES.MemberExpression)break;q=q.object}return!1},N=d=>{let Y=d,q=d;for(;q&&(q.type===utils.AST_NODE_TYPES.CallExpression&&(Y=q,q=q.callee),q.type===utils.AST_NODE_TYPES.MemberExpression);)q=q.object;return Y},m=(d,Y,q)=>{const{name:$}=d;for(const F of Y)if(!(F.range[0]<=d.range[0])){if(F.type===utils.AST_NODE_TYPES.ReturnStatement)return x(F,d);if(F.type===utils.AST_NODE_TYPES.ExpressionStatement){if(F.expression.type===utils.AST_NODE_TYPES.CallExpression){if(M($,F.expression))return!0;const B=N(F.expression),W=parseVitestFnCall(F.expression,q);if(W?.type==="expect"&&B.arguments.length>0&&isIdentifier(B.arguments[0],$)&&W.members.some(H=>{const V=getAccessorValue(H);return V===ModifierName.resolves||V===ModifierName.rejects}))return!0}if(F.expression.type===utils.AST_NODE_TYPES.AwaitExpression&&x(F.expression,d))return!0;if(F.expression.type===utils.AST_NODE_TYPES.AssignmentExpression){if(isIdentifier(F.expression.left,$)&&getNodeName(F.expression.right)?.startsWith(`${$}.`)&&c(F.expression.right))continue;break}}if(F.type===utils.AST_NODE_TYPES.BlockStatement&&m(d,F.body,q))return!0}return!1},y=d=>{let Y=d;for(;Y;){if(Y.type===utils.AST_NODE_TYPES.BlockStatement)return Y.body;Y=Y.parent}throw new Error("Could not find BlockStatement - please file a github issue at https://github.com/vitest-dev/eslint-plugin-vitest")},I=(d,Y)=>{let q=d;for(;q;){if(isFunction(q))return q=q.parent,q?.type===utils.AST_NODE_TYPES.CallExpression&&isTypeOfVitestFnCall(q,Y,["test"]);q=q.parent}return!1},P=(d,Y)=>{const q=y(d);return isIdentifier(d.id)?m(d.id,q,Y):!0},kr=createEslintRule({name:RULE_NAME$2,meta:{docs:{description:"require promises that have expectations in their chain to be valid"},messages:{expectInFloatingPromise:"This promise should either be returned or awaited to ensure the expects in its chain are called"},type:"suggestion",schema:[]},defaultOptions:[{alwaysAwait:!1,asyncMatchers:w,minArgs:1,maxArgs:1}],create(d){let Y=!1;const q=[];return{CallExpression($){if(k($,d)){Y=!0;return}if(c($)){q.unshift(!1);return}q.length>0&&isTypeOfVitestFnCall($,d,["expect"])&&(q[0]=!0)},"CallExpression:exit"($){if(Y){isTypeOfVitestFnCall($,d,["test"])&&(Y=!1);return}if(!c($)||!q.shift())return;const{parent:F}=findTopMostCallExpression($);if(!(!F||!I(F,d))){switch(F.type){case utils.AST_NODE_TYPES.VariableDeclarator:{if(P(F,d))return;break}case utils.AST_NODE_TYPES.AssignmentExpression:{if(F.left.type===utils.AST_NODE_TYPES.Identifier&&m(F.left,y(F),d))return;break}case utils.AST_NODE_TYPES.ExpressionStatement:break;case utils.AST_NODE_TYPES.ReturnStatement:case utils.AST_NODE_TYPES.AwaitExpression:default:return}d.report({messageId:"expectInFloatingPromise",node:F})}}}}}),RULE_NAME$1="prefer-strict-boolean-matchers",xr=createEslintRule({name:RULE_NAME$1,meta:{type:"suggestion",docs:{description:"enforce using `toBe(true)` and `toBe(false)` over matchers that coerce types to boolean",recommended:!1},messages:{preferToBeTrue:"Prefer using `toBe(true)` to test value is `true`",preferToBeFalse:"Prefer using `toBe(false)` to test value is `false`"},fixable:"code",schema:[]},defaultOptions:[],create(d){return{CallExpression(Y){const q=parseVitestFnCall(Y,d);if(!(q?.type==="expect"||q?.type==="expectTypeOf"))return;const $=getAccessorValue(q.matcher);$==="toBeFalsy"&&d.report({node:q.matcher,messageId:"preferToBeFalse",fix:F=>[F.replaceText(q.matcher,"toBe"),F.insertTextAfterRange([q.matcher.range[0],q.matcher.range[1]+1],"false")]}),$==="toBeTruthy"&&d.report({node:q.matcher,messageId:"preferToBeTrue",fix:F=>[F.replaceText(q.matcher,"toBe"),F.insertTextAfterRange([q.matcher.range[0],q.matcher.range[1]+1],"true")]})}}}}),RULE_NAME="require-mock-type-parameters",vr=createEslintRule({name:RULE_NAME,meta:{type:"suggestion",docs:{description:"enforce using type parameters with vitest mock functions",recommended:!1},messages:{noTypeParameter:"Missing type parameters"},fixable:"code",schema:[{type:"object",properties:{checkImportFunctions:{type:"boolean"}},additionalProperties:!1}]},defaultOptions:[{checkImportFunctions:!1}],create(d,[Y]){return{CallExpression(q){const $=parseVitestFnCall(q,d);if($?.type==="vi")for(const F of $?.members)!("name"in F)||F.parent.parent.typeArguments!==void 0||(F.name==="fn"&&d.report({node:F,messageId:"noTypeParameter"}),Y.checkImportFunctions&&["importActual","importMock"].includes(F.name)&&d.report({node:F,messageId:"noTypeParameter"}))}}}}),de=d=>Object.keys(d).reduce((Y,q)=>({...Y,[`vitest/${q}`]:d[q]}),{}),Ae=d=>({plugins:["@vitest"],rules:Object.keys(d).reduce((Y,q)=>({...Y,[`@vitest/${q}`]:d[q]}),{})}),Me={[RULE_NAME$10]:"warn",[RULE_NAME$$]:"warn",[RULE_NAME$Z]:"warn",[RULE_NAME$Y]:"warn",[RULE_NAME$W]:"warn",[RULE_NAME$U]:"warn",[RULE_NAME$T]:"warn",[RULE_NAME$S]:"warn",[RULE_NAME$R]:"warn",[RULE_NAME$Q]:"warn",[RULE_NAME$O]:"warn",[RULE_NAME$M]:"warn",[RULE_NAME$L]:"warn",[RULE_NAME$K]:"warn",[RULE_NAME$J]:"warn",[RULE_NAME$I]:"warn",[RULE_NAME$H]:"warn",[RULE_NAME$G]:"warn",[RULE_NAME$F]:"warn",[RULE_NAME$E]:"warn",[RULE_NAME$D]:"warn",[RULE_NAME$C]:"warn",[RULE_NAME$B]:"warn",[RULE_NAME$w]:"off",[RULE_NAME$y]:"warn",[RULE_NAME$x]:"off",[RULE_NAME$v]:"warn",[RULE_NAME$u]:"warn",[RULE_NAME$t]:"warn",[RULE_NAME$s]:"warn",[RULE_NAME$r]:"warn",[RULE_NAME$q]:"warn",[RULE_NAME$p]:"warn",[RULE_NAME$o]:"warn",[RULE_NAME$n]:"warn",[RULE_NAME$m]:"warn",[RULE_NAME$k]:"warn",[RULE_NAME$j]:"warn",[RULE_NAME$i]:"warn",[RULE_NAME$g]:"warn",[RULE_NAME$f]:"warn",[RULE_NAME$e]:"warn",[RULE_NAME$d]:"warn",[RULE_NAME$c]:"warn",[RULE_NAME$b]:"warn",[RULE_NAME$V]:"warn",[RULE_NAME$a]:"warn",[RULE_NAME$9]:"warn",[RULE_NAME$3]:"warn",[RULE_NAME$8]:"warn",[RULE_NAME$7]:"warn",[RULE_NAME$6]:"warn",[RULE_NAME$5]:"warn",[RULE_NAME$4]:"warn",[RULE_NAME$2]:"warn",[RULE_NAME$X]:"warn",[RULE_NAME$_]:"warn",[RULE_NAME$P]:"warn",[RULE_NAME$A]:"warn",[RULE_NAME$z]:"warn",[RULE_NAME$l]:"warn",[RULE_NAME$h]:"warn",[RULE_NAME$N]:"warn",[RULE_NAME$1]:"warn",[RULE_NAME]:"warn"},ue={[RULE_NAME$X]:"error",[RULE_NAME$_]:"error",[RULE_NAME$P]:"error",[RULE_NAME$A]:"error",[RULE_NAME$z]:"error",[RULE_NAME$l]:"error",[RULE_NAME$h]:"error",[RULE_NAME$N]:"error"},l={meta:{name:"vitest",version},rules:{[RULE_NAME$10]:Re,[RULE_NAME$$]:Le,[RULE_NAME$_]:Te,[RULE_NAME$Z]:Ue,[RULE_NAME$Y]:_e,[RULE_NAME$X]:be,[RULE_NAME$W]:he,[RULE_NAME$V]:ge,[RULE_NAME$U]:ke,[RULE_NAME$T]:xe,[RULE_NAME$S]:ve,[RULE_NAME$R]:Ce,[RULE_NAME$Q]:Be,[RULE_NAME$P]:Se,[RULE_NAME$O]:ye,[RULE_NAME$M]:De,[RULE_NAME$L]:He,[RULE_NAME$K]:Oe,[RULE_NAME$J]:qe,[RULE_NAME$I]:Fe,[RULE_NAME$H]:Pe,[RULE_NAME$G]:je,[RULE_NAME$F]:Ve,[RULE_NAME$E]:Ke,[RULE_NAME$D]:$e,[RULE_NAME$C]:Ge,[RULE_NAME$N]:Ie,[RULE_NAME$B]:We,[RULE_NAME$A]:ze,[RULE_NAME$z]:Je,[RULE_NAME$w]:Ye,[RULE_NAME$y]:Qe,[RULE_NAME$x]:Xe,[RULE_NAME$v]:Ze,[RULE_NAME$u]:er,[RULE_NAME$t]:rr,[RULE_NAME$s]:or,[RULE_NAME$r]:tr,[RULE_NAME$q]:ar,[RULE_NAME$p]:nr,[RULE_NAME$h]:cr,[RULE_NAME$o]:sr,[RULE_NAME$n]:ir,[RULE_NAME$m]:mr,[RULE_NAME$l]:pr,[RULE_NAME$k]:Er,[RULE_NAME$j]:lr,[RULE_NAME$i]:fr,[RULE_NAME$g]:Nr,[RULE_NAME$f]:dr,[RULE_NAME$e]:Ar,[RULE_NAME$d]:Mr,[RULE_NAME$c]:ur,[RULE_NAME$b]:wr,[RULE_NAME$a]:Rr,[RULE_NAME$9]:Lr,[RULE_NAME$3]:Tr,[RULE_NAME$8]:Ur,[RULE_NAME$7]:_r,[RULE_NAME$6]:br,[RULE_NAME$5]:hr,[RULE_NAME$4]:gr,[RULE_NAME$2]:kr,[RULE_NAME$1]:xr,[RULE_NAME]:vr},environments:{env:{globals:{suite:!0,test:!0,describe:!0,it:!0,expectTypeOf:!0,assertType:!0,expect:!0,assert:!0,chai:!0,vitest:!0,vi:!0,beforeAll:!0,afterAll:!0,beforeEach:!0,afterEach:!0,onTestFailed:!0,onTestFinished:!0}}},configs:{"legacy-recommended":Ae(ue),"legacy-all":Ae(Me),recommended:{name:"@vitest/recommended",plugins:{get vitest(){return l}},rules:de(ue)},all:{name:"@vitest/all",plugins:{get vitest(){return l}},rules:de(Me)},env:{name:"@vitest/env",languageOptions:{globals:{suite:"writable",test:"writable",describe:"writable",it:"writable",expectTypeOf:"writable",assertType:"writable",expect:"writable",assert:"writable",chai:"writable",vitest:"writable",vi:"writable",beforeAll:"writable",afterAll:"writable",beforeEach:"writable",afterEach:"writable",onTestFailed:"writable",onTestFinished:"writable"}}}}};module.exports=l;
